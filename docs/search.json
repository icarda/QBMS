[{"path":"/articles/bms_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"BMS Example","text":"R package assists breeders linking data systems analytic pipelines, crucial step digitizing breeding processes. supports querying retrieving phenotypic genotypic data systems like EBS, BMS, BreedBase, GIGWA (using BrAPI calls). Extra helper functions support environmental data sources, including TerraClimate FAO HWSDv2 soil database.","code":""},{"path":"/articles/bms_example.html","id":"breeding-management-system","dir":"Articles","previous_headings":"QBMS","what":"Breeding Management System","title":"BMS Example","text":"Breeding Management System (BMS) information management system developed Integrated Breeding Platform help breeders manage breeding process, programme planning decision-making. BMS customizable crop breeding programs, comes pre-loaded curated ontology terms many crops (bean, cassava, chickpea, cowpea, groundnut, maize, rice, sorghum, soybean, wheat, others). BMS available cloud application, can installed local remote servers accessed multiple users.","code":""},{"path":"/articles/bms_example.html","id":"brapi","dir":"Articles","previous_headings":"QBMS","what":"BrAPI","title":"BMS Example","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management. BMS version 25 onward, users must possess necessary permissions utilize BrAPI services. table outlines permissions needed accessing specific services.","code":""},{"path":"/articles/bms_example.html","id":"example","dir":"Articles","previous_headings":"QBMS","what":"Example","title":"BMS Example","text":"","code":"# load the QBMS library library(QBMS)  # config your BMS connection (by providing your BMS login page URL) set_qbms_config(\"https://bms.icarda.org/ibpworkbench/controller/auth/login\")  # login using your BMS account (interactive mode) # or pass your BMS username and password as parameters (batch mode) login()  # list supported crops in the current bms server list_crops()  # select a crop by name set_crop(\"wheat\")  # list all breeding programs in the selected crop list_programs()  # select a breeding program by name set_program(\"Wheat International Nurseries\")  # list all studies/trials in the selected program list_trials()  # filtered by year of starting date list_trials(2022)  # select a specific study/trial by name set_trial(\"IDYT39\")  # list all environments/locations information in the selected study/trial list_studies()  # select a specific environment/location by name set_study(\"IDYT39 Environment Number 9\")  # select a specific study by location name (first match) studies <- list_studies() set_study(studies[studies$locationName == \"Amlaha\", \"studyName\"][1])  # retrieve data, general information, and germplasm list  # of the selected environment/location data <- get_study_data() info <- get_study_info() germplasm <- get_germplasm_list()  # get observation variable ontology in the selected study/trial ontology <- get_trial_obs_ontology()  # get the pedigree table pedigree_table <- get_pedigree_table(germplasm, \"germplasmName\", \"pedigree\")  # retrieve multi-environment trial data of the selected study/trial MET <- get_trial_data()  # retrieve all environments/locations information in the selected program program_studies <- get_program_studies()  # retrieve observations data of given germplasm aggregated from all trials  # in the selected program # e.g., https://www.croptrust.org/news-events/campaigns/jabal-durum-wheat-variety/ germplasm_observations <- get_germplasm_data(\"Jabal\")  # retrieve germplasm attributes for a given germplasm in a crop germplasm_attributes <- get_germplasm_attributes(\"Jabal\")"},{"path":"/articles/breedbase_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"BreedBase Example","text":"R package assists breeders linking data systems analytic pipelines, crucial step digitizing breeding processes. supports querying retrieving phenotypic genotypic data systems like EBS, BMS, BreedBase, GIGWA (using BrAPI calls). Extra helper functions support environmental data sources, including TerraClimate FAO HWSDv2 soil database.","code":""},{"path":"/articles/breedbase_example.html","id":"breedbase","dir":"Articles","previous_headings":"","what":"BreedBase","title":"BreedBase Example","text":"Breedbase comprehensive breeding management analysis software. can used design field layouts, collect phenotypic information using tablets, support collection genotyping samples field, store large amounts high density genotypic information, provide Genomic Selection related analyses predictions.","code":""},{"path":"/articles/breedbase_example.html","id":"brapi","dir":"Articles","previous_headings":"","what":"BrAPI","title":"BreedBase Example","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management. can find set Breedbase based servers available several crops accessible authentication required listed BrAPI website following page group Boyce Thompson Institute (BTI), discovery innovation life sciences: https://brapi.org/servers.","code":""},{"path":"/articles/breedbase_example.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"BreedBase Example","text":"","code":"# load the QBMS library library(QBMS)  # Cassava BreedBase server set_qbms_config(\"https://cassavabase.org/\", no_auth = TRUE, engine = \"breedbase\")  # login(\"username\", \"password\")  # list supported crops in the current BreedBase server list_crops()  # list all breeding programs in the selected crop list_programs()  # select a breeding program by name set_program(\"IITA\")  # list all folders in the selected program list_trials()  # select a specific folder by name, choose the last/final folder that contains  # your experiments in any nested folder structure set_trial(\"20_Abuja\")  # list all studies/experiments in the selected folder list_studies()  # select a specific study/experiment by name set_study(\"20NCRP12yrtAB\")  # another option, select a specific study/experiment by location name (first match) # studies <- list_studies() # set_study(studies[studies$locationName == \"Abuja\", \"studyName\"][1])  # retrieve general information, data, and germplasm list  # of the selected study/experiment info <- get_study_info() data <- get_study_data()  # not effecient call at the BreedBase backend BrAPI endpoint germplasm <- get_germplasm_list()  # get observation variable ontology in the selected study/experiment ontology <- get_trial_obs_ontology()  # replace long trait names with short ones from the ontology  fields <- colnames(data)   for (i in 1:length(fields)) {   j <- which(ontology$name %in% fields[i])   if (length(j) > 0) fields[i] <- ontology$synonyms[[j]][1] }  colnames(data) <- fields  # retrieve all studies/experiments data in the selected folder MET <- get_trial_data()"},{"path":"/articles/ebs_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"EBS Example","text":"R package assists breeders linking data systems analytic pipelines, crucial step digitizing breeding processes. supports querying retrieving phenotypic genotypic data systems like EBS, BMS, BreedBase, GIGWA (using BrAPI calls). Extra helper functions support environmental data sources, including TerraClimate FAO HWSDv2 soil database.","code":""},{"path":"/articles/ebs_example.html","id":"ebs","dir":"Articles","previous_headings":"","what":"EBS","title":"EBS Example","text":"Enterprise Breeding System (EBS) open-source breeding informatics software developed crop breeding programs serving resource-poor farmers Africa, Asia Latin America. EBS connects, merges builds upon existing breeding software data solutions offer single powerful tool, breeders can focus using data create better varieties, faster. Development led CGIAR Excellence Breeding Platform CGIAR Breeding Resources Initiative, support CGIAR national agricultural research system programs adopt breeding workflows data management practices required adopt EBS. EBS chosen preferred data management system CGIAR (source).","code":""},{"path":"/articles/ebs_example.html","id":"brapi","dir":"Articles","previous_headings":"","what":"BrAPI","title":"EBS Example","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/articles/ebs_example.html","id":"oauth-2-0","dir":"Articles","previous_headings":"","what":"OAuth 2.0","title":"EBS Example","text":"OAuth 2.0 industry-standard protocol authorization. OAuth 2.0 focuses client developer simplicity providing specific authorization flows web applications, desktop applications, mobile phones, living room devices. specification extensions developed within IETF OAuth Working Group. Package maintainers might want build app fallback, possibly taking measures obfuscate client ID secret limit use package. Note three-legged OAuth always requires involvement user, word “secret” can somewhat confusing. secret sense password token. probably still want store opaque way, someone else easily “borrow” present OAuth consent screen impersonates package. Client ID public identifier application, secret anyway end user can see app redirects sign (e.g., use browser tools view HTTP request). JSON Web Tokens open, industry standard RFC 7519 method representing claims securely two parties. https://jwt.io/ allows decode, verify generate JWT.","code":""},{"path":"/articles/ebs_example.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"EBS Example","text":"","code":"# load the QBMS library library(QBMS)  # config the EBS connection set_qbms_config(url = 'https://cbbrapi-qa.ebsproject.org', engine = 'ebs', brapi_ver = 'v2')  # set your access token manually # set_token(readline('token:'))  # EBS OAuth 2.0 configuration login_oauth2(authorize_url = 'https://auth-dev.ebsproject.org/oauth2/authorize',               access_url    = 'https://auth-dev.ebsproject.org/oauth2/token',               client_id     = '<your client id>',               client_secret = '<your client secret>')  # list all breeding programs list_programs()  # select a breeding program by name set_program('Irrigated South-East Asia')  # list all trials in the selected program list_trials()  # select a specific trial by name set_trial('CORB-5272 -test1')  # list all studies (occurancies) in the selected trial list_studies()  # select a specific study (occurance) by name set_study('CORB-5272 -test1-001')  # retrieve study (occurance) metadata/information info <- get_study_info()  # retrieve study (occurance) data data <- get_study_data()  # retrieve study (occurance) germplasm list germplasm <- get_germplasm_list()  # retrieve traits ontology for the selected trial ontology <- get_trial_obs_ontology()  # retrieve multi-environment (occurencies) data of the selected trial MET <- get_trial_data()"},{"path":"/articles/germinate_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"Germinate Example","text":"R package assists breeders linking data systems analytic pipelines, crucial step digitizing breeding processes. supports querying retrieving phenotypic genotypic data systems like EBS, BMS, BreedBase, Germinate GIGWA (using BrAPI calls). Extra helper functions support environmental data sources, including TerraClimate FAO HWSDv2 soil database.","code":""},{"path":"/articles/germinate_example.html","id":"germinate","dir":"Articles","previous_headings":"","what":"Germinate","title":"Germinate Example","text":"Germinate open source plant database infrastructure application programming platform complex data genetic resource collections can stored, queried visualized using common, reusable, programming components. Germinate utilises modern web database standards provide common architecture high performance web-based user interface analytics functionality across wide variety data types including: passport, phenotypic, field trial, pedigree, genetic, climatic, geographic location data well user-submitted annotations. addition, provides links expanding variety external visualization analysis tools Helium pedigree visualization, Flapjack graphical genotyping CurlyWhirly 3D coordinate data.","code":""},{"path":"/articles/germinate_example.html","id":"brapi","dir":"Articles","previous_headings":"","what":"BrAPI","title":"Germinate Example","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/articles/germinate_example.html","id":"connect-to-a-germinate-server","dir":"Articles","previous_headings":"","what":"Connect to a Germinate server","title":"Germinate Example","text":"","code":"# load the QBMS library library(QBMS)  # configure your Germinate server connection set_qbms_config(url = \"https://germinate.hutton.ac.uk/demo/#/home\",                  engine = \"germinate\",                  no_auth = TRUE,                  page_size = 9999)  # login using your account (interactive mode) # login() # or pass your username and password as parameters (batch mode) # login(\"username\", \"password\")  # list existing crops on the current server list_crops()  # select a crop by name set_crop(\"Cactuar\")  # list all breeding programs in the selected crop list_programs()  # select a breeding program by name set_program(\"Germinate\")  # list all trials in the selected program list_trials()  # select a specific trial by name set_trial(\"GWAS data\")  # list all studies (environments/locations) in the selected trial list_studies()"},{"path":"/articles/germinate_example.html","id":"work-with-phenotypic-data","dir":"Articles","previous_headings":"","what":"Work with Phenotypic Data","title":"Germinate Example","text":"","code":"# select a specific study by name set_study(\"Sample Phenotype Data\")  # retrieve general information and metadata for the selected study info <- get_study_info()  # retrieve the germplasm list for the selected study geno <- get_germplasm_list()  # retrieve attributes for a specified germplasm attr <- get_germplasm_attributes(\"CACTUAR-3\")  # retrieve study data data <- get_study_data()  # get observation variable ontology in the selected study/trial ontology <- get_trial_obs_ontology()"},{"path":"/articles/germinate_example.html","id":"work-with-genotypic-data","dir":"Articles","previous_headings":"","what":"Work with Genotypic Data","title":"Germinate Example","text":"","code":"# select a specific study by name set_study(\"Sample Genotype Data Subset 2\")  # list all variant sets in the selected study list_variantsets()  # select a specific active variant set by name set_variantset(\"Sample Genotype Data Subset 2\")  # retrieve the selected variant set marker matrix snps <- get_variantset()  # get marker position information map <- get_marker_map()"},{"path":"/articles/germinate_example.html","id":"work-with-pedigree-data","dir":"Articles","previous_headings":"","what":"Work with Pedigree Data","title":"Germinate Example","text":"","code":"# select a specific study by name set_trial(\"Default pedigree experiment\")  # get the pedigree table for the selected trial ped <- get_trial_pedigree()"},{"path":"/articles/gigwa_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"GIGWA Example","text":"R package assists breeders linking data systems analytic pipelines, crucial step digitizing breeding processes. supports querying retrieving phenotypic genotypic data systems like EBS, BMS, BreedBase, GIGWA (using BrAPI calls). Extra helper functions support environmental data sources, including TerraClimate FAO HWSDv2 soil database.","code":""},{"path":"/articles/gigwa_example.html","id":"gigwa","dir":"Articles","previous_headings":"","what":"GIGWA","title":"GIGWA Example","text":"GIGWA web-based tool provides easy intuitive way explore large amounts genotyping data filtering latter based variant features, including functional annotations, also genotype patterns. data storage relies MongoDB, offers good scalability perspectives. GIGWA can handle multiple databases may deployed either single multi-user mode. Finally, provides wide range popular export formats.","code":""},{"path":"/articles/gigwa_example.html","id":"brapi","dir":"Articles","previous_headings":"","what":"BrAPI","title":"GIGWA Example","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/articles/gigwa_example.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"GIGWA Example","text":"","code":"# load the QBMS library library(QBMS)  # The public GIGWA testing server required no authentication. If your GIGWA server  # requires authentication, then make sure that no_auth parameter value is FALSE # IMPORTENT NOTE: QBMS required GIGWA version 2.4.1 or higher set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                  time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # If login is required, then you can use your GIGWA account (interactive mode) # or pass your GIGWA username and password as parameters (batch mode) # login_gigwa() # login_gigwa(\"gigwadmin\", \"nimda\")  # list existing databases in the current GIGWA server gigwa_list_dbs()  # select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # list all projects in the selected database gigwa_list_projects()  # select a project by name gigwa_set_project(\"Nelson_et_al_2011\")  # list all runs in the selected project gigwa_list_runs()  # select a specific run by name gigwa_set_run(\"run1\")  # get a list of all samples in the selected run samples <- gigwa_get_samples()  # show the first 6 individuals on the list of samples head(samples)  # query the variants (e.g., SNPs markers) in the selected run  # that match the given criteria: # - max_missing: maximum missing ratio (by sample) [0-1] (default is 1 for 100%)  # - min_maf: minimum Minor Allele Frequency (MAF) [0-1] (default is 0 for 0%)  # - start: start position of region (zero-based, inclusive) (e.g., 19750802) # - end: end position of region (zero-based, exclusive) (e.g., 19850125) # - referenceName: reference sequence name  (e.g., '6H' in the Barley LI-AM) # - samples: a list of a samples subset (default is NULL will retrieve for all samples)  marker_matrix <- gigwa_get_variants(max_missing = 0.2,                                      min_maf = 0.05,                                      start = 100000,                                     end = 500000,                                     samples = c(\"ind1\", \"ind3\", \"ind7\"))  # Data returns in data.frame format. The first 4 columns describe attributes of the SNP  # - rs#: variant name # - alleles: reference allele / alternative allele # - chrom: chromosome name # - pos: position in bp # while the following columns describe the SNP value for a single sample line using  # numerical coding 0, 1, and 2 for reference, heterozygous, alternative/minor alleles. head(marker_matrix)  # get the metadata associated with the samples in the current active run gigwa_set_db(\"DIVRICE_NB\") gigwa_set_project(\"refNB\") gigwa_set_run(\"03052022\")  # get a list of all samples in the selected run metadata <- gigwa_get_metadata()  View(metadata)"},{"path":"/articles/gigwa_example.html","id":"enhanced-allele-matrix-retrieval","dir":"Articles","previous_headings":"","what":"Enhanced Allele Matrix Retrieval","title":"GIGWA Example","text":"following functions now utilize new efficient BrAPI v2.1 /allelematrix calls, requiring version 2.6 GIGWA higher. update significantly improves QBMS allele matrix retrieval speed, increasing 10 times, demonstrated benchmark tests.","code":"# Configure your GIGWA connection set_qbms_config(\"https://gigwa-dev.southgreen.fr/gigwaV2/\", page_size = 50000,                 time_out = 300, engine = \"gigwa\", no_auth = TRUE)  # Select a database by name gigwa_set_db(\"Sorghum-JGI_v1\")  # Select a project by name gigwa_set_project(\"Nelson_et_al_2011\")  # Select a specific run by name gigwa_set_run(\"run1\")  # Get the list of all samples in the selected project germplasmNames <- gigwa_get_samples()  # Get the list of all sequences in the selected project chroms <- gigwa_get_sequences()  ### Get Variants Info (Geno Map) ###############################################  ?gigwa_get_markers geno_map <- gigwa_get_markers(start = 0,                               end = 1234567,                               # chrom = c(\"Sb01\", \"Sb02\"),      # chroms[1:3]                               )  ### Get Marker Matrix ##########################################################  ?gigwa_get_allelematrix geno_data <- gigwa_get_allelematrix(start = 0,                  # default is 0                                     end = 1234567,              # default is \"\" -> \"ref:0-\"                                     snps = geno_map$`rs#`,      # optional                                     # chrom = \"Sb01\",           # c(\"Sb01\", \"Sb07\")                                     # samples = germplasmNames, # gigwa_get_samples()                                     # snps_pageSize = 10000,                                     # samples_pageSize = 100,                                     )  ### Get The Whole Variant Set ##################################################  ?get_variantset snps <- get_variantset()"},{"path":"/articles/hwsd2_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"FAO HWSD v2 Example","text":"R package assists breeders linking data systems analytic pipelines, crucial step digitizing breeding processes. supports querying retrieving phenotypic genotypic data systems like EBS, BMS, BreedBase, GIGWA (using BrAPI calls). Extra helper functions support environmental data sources, including TerraClimate FAO HWSDv2 soil database.","code":""},{"path":"/articles/hwsd2_example.html","id":"fao-hwsd-v2-soil-database","dir":"Articles","previous_headings":"","what":"FAO HWSD v2 Soil Database","title":"FAO HWSD v2 Example","text":"Harmonized World Soil Database version 2.0 (HWSD v2.0) unique global soil inventory providing information morphological, chemical physical properties soils approximately 1 km resolution. main objective serve basis prospective studies agro-ecological zoning, food security climate change. details, can get HWSD v2.0 technical report instructions https://doi.org/10.4060/cc3823en.","code":""},{"path":"/articles/hwsd2_example.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"FAO HWSD v2 Example","text":"","code":"# load the QBMS library library(QBMS)  # create a simple data.frame for a list of locations and their coordinates Location  <- c('Tel-Hadya', 'Terbol', 'Marchouch') Latitude  <- c(36.016, 33.808, 33.616) Longitude <- c(36.943, 35.991, -6.716)  sites <- data.frame(Location, Latitude, Longitude)  # initiate, download, and setup the HWSD v2 in a given local directory hwsd2 <- ini_hwsd2()  # query soil attributes for given sites using the HWSD v2 connection object #   # sequence parameter, range between 1 and 12 (max), 1 is the dominant soil.  # returned df has SHARE column refers to share%  #  # layer parameter refers to depth layer (D1 to D7).  # returned df has TOPDEP/BOTDEP columns represent top/bottom layer depth in cm. sites <- get_hwsd2(df = sites,                     con = hwsd2,                     x = 'Longitude',                     y = 'Latitude',                     sequence = 1,                     layer = 'D1')"},{"path":"/articles/hwsd2_example.html","id":"advanced-users","dir":"Articles","previous_headings":"","what":"Advanced Users","title":"FAO HWSD v2 Example","text":"","code":"# check the HWSD v2 raster  print(hwsd2$raster)   # display the metadata for the layers table DBI::dbGetQuery(hwsd2$sqlite, 'select * from HWSD2_LAYERS_METADATA')   # the lookup tables are shown for the coded fields # for example, the USDA Texture Class codes (the column TEXTURE_USDA value) # are linked to their names in table D_TEXTURE_USDA DBI::dbGetQuery(hwsd2$sqlite, 'select * from D_TEXTURE_USDA')   # disconnect (close) the SQLite connection DBI::dbDisconnect(hwsd2$sqlite)"},{"path":"/articles/terraclimate_example.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"TerraClimate Example","text":"R package assists breeders linking data systems analytic pipelines, crucial step digitizing breeding processes. supports querying retrieving phenotypic genotypic data systems like EBS, BMS, BreedBase, GIGWA (using BrAPI calls). Extra helper functions support environmental data sources, including TerraClimate FAO HWSDv2 soil database.","code":""},{"path":"/articles/terraclimate_example.html","id":"terraclimate","dir":"Articles","previous_headings":"","what":"TerraClimate","title":"TerraClimate Example","text":"TerraClimate dataset monthly climate climatic water balance global terrestrial surfaces 1958-2019. data provide important inputs ecological hydrological studies global scales require high spatial resolution time-varying data. data monthly temporal resolution ~4-km (1/24th degree) spatial resolution. data cover period 1958-2020. plan update data periodically (annually). TerraClimate climate climatic water balance dataset 14 variables global terrestrial surfaces 1958 2022 (updated annually) comparing 7 climate variables 1970-2000 WorldClim dataset. data monthly temporal resolution ~4-km (1/24th degree) spatial resolution. can retrieve TerraClimate data using QBMS R package two modes, Online using API calls (minimizing download size), Offline downloading required NetCDF rasters first (minimizing query time). QBMS also calculate 19 derivatives bioclimatic variables -fly. Abatzoglou, J., Dobrowski, S., Parks, S. et al. TerraClimate, high-resolution global dataset monthly climate climatic water balance 1958–2015. Sci Data 5, 170191 (2018). https://doi.org/10.1038/sdata.2017.191","code":""},{"path":"/articles/terraclimate_example.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"TerraClimate Example","text":"","code":"# load the QBMS library library(QBMS)  # ICARDA Tal-Hadya station, Syria data <- get_terraclimate(36.016, 36.943, '1979-09-01', '2012-06-30')  View(data$climate[[1]])  View(data$biovars[[1]])  # 1. ICARDA Merchouch station, Morocco # 2. ICARDA Terbol station, Lebanon # 3. ICARDA Amlaha station, India  x <- c(-6.716, 35.917, 76.884) y <- c(33.616, 33.833, 23.111)  # ICARDA stations (WorldClim temporal range) worldclim_range <- get_terraclimate(y, x, '1970-01-01', '2000-12-31', c('ppt', 'tmin', 'tmax'))  # ?calc_biovars worldclim_norm  <- apply(worldclim_range$biovars[[2]][,1:19], 2, function(x) round(mean(x), 1))  # biovars       bio1   bio2   bio3   bio4   bio5   bio6   bio7   bio8   bio9  bio10  bio11 # terraclimate  16.2   13.5   41.4   713.5  33.8   1.0    32.8   8.0    24.3  24.5   7.4 # worldclim/10  15.5   13.6   43.0   631.0  33.0   1.6    31.4   7.3    23.2  23.2   7.3 # # NOTE: all worldcim biovars derivative from temperature (i.e., bio1-bio11) have a scale factor of 10  #       except bio3 because it is a ratio. # # biovars(cont) bio12  bio13  bio14  bio15  bio16  bio17  bio18  bio19 # terraclimate  661.0  182.1  0.0    113.5  419.2  0.3    0.9    398.5 # worldclim     592.0  140.0  0.0    99.0   368.0  1.0    2.0    368.0"},{"path":"/articles/terraclimate_example.html","id":"offline-mode","dir":"Articles","previous_headings":"","what":"Offline Mode","title":"TerraClimate Example","text":"Download TerraClimate netCDF data files: encounter timeout error execution ini_terraclimate() function, can extend timeout duration environment following command (e.g., 5 minutes, 300 seconds, instead default 60 seconds): default timeout 60 seconds often sufficient downloading large files (50 MB). Additionally, expecting download times less 1MB per second unrealistic.","code":"# ?ini_terraclimate ini_terraclimate('2018-09-01', '2019-06-30', c('ppt', 'tmin', 'tmax'))  # Get TerraClimate data for a given coordinate(s) data <- get_terraclimate(y, x, '2018-09-01', '2019-06-30', c('ppt', 'tmin', 'tmax'), offline = TRUE) options(timeout = max(300, getOption(\"timeout\")))"},{"path":"/articles/tutorial.html","id":"qbms","dir":"Articles","previous_headings":"","what":"QBMS","title":"QBMS Tutorial","text":"Linking data management systems analytics important step breeding digitalization. Breeders can use R package Query Breeding Management System database (using BrAPI calls) help retrieve experiments data directly R statistical analyzing environment. Author Maintainer: Khaled Al-Shamaa <k.el-shamaa () cgiar (dot) org> Contributor: Mariano Omar CRIMI <m.crimi () cgiar (dot) org> Contributor: Zakaria Kehel <z.kehel () cgiar (dot) org> Copyright Holder: International Center Agricultural Research Dry Areas (ICARDA)","code":""},{"path":"/articles/tutorial.html","id":"breeding-management-system","dir":"Articles","previous_headings":"QBMS","what":"Breeding Management System","title":"QBMS Tutorial","text":"Breeding Management System (BMS) information management system developed Integrated Breeding Platform help breeders manage breeding process, programme planning decision-making. BMS customizable crop breeding programs, comes pre-loaded curated ontology terms many crops (bean, cassava, chickpea, cowpea, groundnut, maize, rice, sorghum, soybean, wheat, others). BMS available cloud application, can installed local remote servers accessed multiple users.","code":""},{"path":"/articles/tutorial.html","id":"brapi","dir":"Articles","previous_headings":"QBMS","what":"BrAPI","title":"QBMS Tutorial","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/articles/tutorial.html","id":"install","dir":"Articles","previous_headings":"QBMS","what":"Install","title":"QBMS Tutorial","text":"already active BMS user, can contact IBP support get access trial BMS server.","code":"install.packages(\"remotes\") remotes::install_github(\"icarda-git/QBMS\")"},{"path":"/articles/tutorial.html","id":"example","dir":"Articles","previous_headings":"QBMS","what":"Example","title":"QBMS Tutorial","text":"","code":"# load the QBMS library library(QBMS)  # config your BMS connection (by providing your BMS login page URL) set_qbms_config(\"https://www.bms-uat-test.net/ibpworkbench/controller/auth/login\")  # login using your BMS account (interactive mode) # or pass your BMS username and password as parameters (batch mode) login_bms()  # list supported crops in the current bms server list_crops()  # select a crop by name set_crop(\"maize\")  # list all breeding programs in the selected crop list_programs()  # select a breeding program by name set_program(\"MC Maize\")  # list all studies/trials in the selected program list_trials()  # filtered by year of starting date list_trials(2020)  # select a specific study/trial by name set_trial(\"2018 PVT\")  # get observation variable ontology in the selected study/trial ontology <- get_trial_obs_ontology()  # list all environments/locations information in the selected study/trial list_studies()  # select a specific environment/location by name set_study(\"2018 PVT Environment Number 1\")  # select a specific study by location name (first match) studies <- list_studies() set_study(studies[studies$locationName == \"BASF Bremen\", \"studyName\"][1])  # retrieve data, general information, and germplasm list of the selected environment/location data <- get_study_data() info <- get_study_info() germplasm <- get_germplasm_list()  # get the pedigree table pedigree_table <- get_pedigree_table(germplasm, \"germplasmName\", \"pedigree\")  # retrieve multi-environment trial data of the selected study/trial MET <- get_trial_data()  # retrieve all environments/locations information in the selected program program_studies <- get_program_studies()  # retrieve observations data of given germplasm aggregated from all trials in the selected program germplasm_observations <- get_germplasm_data(\"BASFCORN-2-1\")"},{"path":"/articles/tutorial.html","id":"troubleshooting-the-installation","dir":"Articles","previous_headings":"QBMS","what":"Troubleshooting the installation","title":"QBMS Tutorial","text":"installation QBMS generates errors saying existing packages removed, can try quit R session, try start R administrator (Windows) SUDO mode (Linux/Ubuntu) try installing . get error related packages built current version R, updating packages doesn’t help, can consider overriding error following code. Note: might help install QBMS may result problems. possible, ’s best resolve errors rather ignoring .","code":"Sys.setenv(\"R_REMOTES_NO_ERRORS_FROM_WARNINGS\" = TRUE)  remotes::install_github(\"icarda-git/QBMS\", upgrade = \"always\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Khaled Al-Shamaa. Author, maintainer. Mariano Omar Crimi. Contributor. Zakaria Kehel. Contributor. Johan Aparicio. Contributor. ICARDA. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Al-Shamaa K, Crimi M, Kehel Z, Aparicio J, ICARDA (2025). QBMS: Query Breeding Management System(s). doi:10.32614/CRAN.package.QBMS, R package version 2.0.0, https://CRAN.R-project.org/package=QBMS.","code":"@Manual{,   title = {QBMS: Query the Breeding Management System(s)},   author = {Khaled Al-Shamaa and Mariano Omar Crimi and Zakaria Kehel and Johan Aparicio and {ICARDA}},   year = {2025},   note = {R package version 2.0.0},   url = {https://CRAN.R-project.org/package=QBMS},   doi = {10.32614/CRAN.package.QBMS}, }"},{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement <k.el-shamaa cgiar.org>. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Query the Breeding Management System(s)","text":"R package assists breeders linking data systems analytic pipelines, crucial step digitizing breeding processes. supports querying retrieving phenotypic genotypic data systems like EBS, BMS, BreedBase, GIGWA, Germinate (using BrAPI calls). Extra helper functions support environmental data sources, including TerraClimate FAO HWSDv2 soil database. Author Maintainer: Khaled Al-Shamaa <k.el-shamaa () cgiar (dot) org> Contributor: Mariano Omar CRIMI <m.crimi () cgiar (dot) org> Contributor: Zakaria Kehel <z.kehel () cgiar (dot) org> Contributor: Johan Aparicio <j.aparicio () cgiar (dot) org> Copyright Holder: International Center Agricultural Research Dry Areas (ICARDA)","code":""},{"path":"/index.html","id":"brapi","dir":"","previous_headings":"","what":"BrAPI","title":"Query the Breeding Management System(s)","text":"Breeding API (BrAPI) project effort enable interoperability among plant breeding databases. BrAPI standardized RESTful web service API specification communicating plant breeding data. community driven standard free used anyone interested plant breeding data management.","code":""},{"path":"/index.html","id":"supported-data-sources","dir":"","previous_headings":"","what":"Supported Data Sources","title":"Query the Breeding Management System(s)","text":"BMS: vignette(\"bms_example\"). EBS: vignette(\"ebs_example\"). Breedbase: vignette(\"breedbase_example\"). GIGWA: vignette(\"gigwa_example\"). Germinate: vignette(\"germinate_example\"). Extra sub-systems supported: TerraClimate: vignette(\"terraclimate_example\"). HWSD v2.0: vignette(\"hwsd2_example\").","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Query the Breeding Management System(s)","text":"Development version get bug fix use feature development version, can install development version QBMS GitHub.","code":"install.packages(\"QBMS\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"icarda/QBMS\")"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Query the Breeding Management System(s)","text":"successfully install QBMS R package, can load library set remote server configuration (e.g., EBS, BMS, BreedBase, GIGWA) simply copying pasting login page URL web browser. start querying retrieving data remote server, login using credentials server’s GUI/web interface. Please note can call login function(s) parameters (interactive mode), get popup window insert username password (highly advised one best security practices). Although, automatic analysis pipeline(s) server services, can still provide required username password login function parameters (.e., batch mode). careful sharing batch mode code avoid leaking credential public authorized spaces.","code":"# load the QBMS library library(QBMS)  # config your BMS connection (by providing your BMS login page URL) set_qbms_config(\"https://bms.icarda.org/ibpworkbench/controller/auth/login\") # login using your account (interactive mode) login_bms()  # or pass your username and password as parameters (batch mode) login_bms(\"username\", \"password\")"},{"path":"/index.html","id":"supporting-multiple-provider-connectors","dir":"","previous_headings":"","what":"Supporting Multiple Provider Connectors","title":"Query the Breeding Management System(s)","text":"can switch ongoing QBMS connection another server/database connection using get_qbms_connection() set_qbms_connection() functions, shown following example (.e., need switch forth back session): detailed example available documentation get_qbms_connection() set_qbms_connection() functions. Also, can find elegant solution developed Francisco Agosto-Perez Breeding Informatics team within Innovation Lab Crop Improvement Cornell University available : https://github.com/agostof/BrAPI-Provider/","code":"# configure QBMS to connect the phenotypics server set_qbms_config(\"https://bms.icarda.org/ibpworkbench/controller/auth/login\")  # login and retrieve data from the phenotypic server  # save current connection (phenotypic server) con1 <- get_qbms_connection()  # configure QBMS to connect the genotypic server set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\", engine = \"gigwa\", no_auth = TRUE)  # retrieve data from the genotypic server  # save current connection (before switch) con2 <- get_qbms_connection()  # load the saved phenotypic server connection set_qbms_connection(con1)  # continue retrieving data from the phenotypic server"},{"path":"/index.html","id":"error-and-debugging","dir":"","previous_headings":"","what":"Error and Debugging","title":"Query the Breeding Management System(s)","text":"get unexpected results weird behavior want dig deep investigate went wrong, can get copy internal QBMS variables calling debug_qbms() function.","code":"dump <- debug_qbms()  dump$config # $crop # [1] \"maize\" #  # $server # [1] \"https://bms.icarda.org\" #  # $path # [1] \"bmsapi\" #  # $page_size # [1] 1000 #  # $time_out # [1] 120 #  # $base_url # [1] \"https://bms.icarda.org/bmsapi\" #  # $engine # [1] \"bms\"  names(dump$state) # [1] \"token\"         \"program_db_id\" \"trial_db_id\"   \"study_db_id\"   \"user\"          # [6] \"expires_in\"    \"errors\"        ...  dump$state$token # [1] \"username:1666907125029:a312bb036cc8d9cc302bee1f0981e5ab\""},{"path":"/index.html","id":"troubleshooting-the-installation","dir":"","previous_headings":"","what":"Troubleshooting the Installation","title":"Query the Breeding Management System(s)","text":"installation QBMS generates errors saying existing packages removed, can try quit R session, try start R administrator (Windows) SUDO mode (Linux/Ubuntu) try installing . get error related packages built current version R, updating packages doesn’t help, can consider overriding error following code. Note: might help install QBMS may result problems. possible, ’s best resolve errors rather ignoring . get error related list set runs GIGWA (.e., gigwa_list_runs() gigwa_set_run() functions), can try ensure R session system locale using UTF-8 character set encoding. may consider overwriting system locale following command resolve issue: get_terraclimate() function takes long time run progress bar stays 0%, might due using outdated version R language. Make sure ’re using latest version. details, please refer GitHub issue.","code":"Sys.setenv(\"R_REMOTES_NO_ERRORS_FROM_WARNINGS\" = TRUE)  remotes::install_github(\"icarda/QBMS\", upgrade = \"always\") Sys.setlocale(\"LC_ALL\", \"English_United States.utf8\")"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Query the Breeding Management System(s)","text":"Peter Selby et al., BrAPI-application programming interface plant breeding applications, Bioinformatics, Volume 35, Issue 20, 15 October 2019, Pages 4147–4155, https://doi.org/10.1093/bioinformatics/btz190 Breeding API (2022, December 15). BrAPI Compatible Software list. Retrieved https://brapi.org/compatibleSoftware Excellence Breeding Toolbox (2023, February 1). Query Breeding Management Systems (QBMS) R package. Retrieved https://excellenceinbreeding.org/toolbox/tools/query-breeding-management-systems-qbms-r-package CGSpace (2023, February 23). Query Breeding Management Systems (QBMS) R package. Retrieved https://cgspace.cgiar.org/handle/10568/128828 MELSpace (2023, February 23). Query Breeding Management Systems (QBMS) R package. Retrieved https://repo.mel.cgiar.org/handle/20.500.11766/68139","code":""},{"path":"/reference/brapi_get_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Function for Core BrAPI GET Calls — brapi_get_call","title":"Internal Function for Core BrAPI GET Calls — brapi_get_call","text":"Fetches data API endpoint, handles pagination retrieving pages, consolidates results single data frame.","code":""},{"path":"/reference/brapi_get_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Function for Core BrAPI GET Calls — brapi_get_call","text":"","code":"brapi_get_call(call_url, nested = TRUE, caller_func = NA)"},{"path":"/reference/brapi_get_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Function for Core BrAPI GET Calls — brapi_get_call","text":"call_url Character string specifying base URL API endpoint request. nested Logical value indicating whether flatten nested lists JSON responses. Defaults TRUE. caller_func Character string identifying name function invoked brapi_get_call().","code":""},{"path":"/reference/brapi_get_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Function for Core BrAPI GET Calls — brapi_get_call","text":"list containing consolidated data associated metadata API response.","code":""},{"path":"/reference/brapi_get_call.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Function for Core BrAPI GET Calls — brapi_get_call","text":"function performs following steps: Fetches first page synchronously determine total number pages. multiple pages exist, asynchronously fetches remaining pages using get_async_pages(). Consolidates data pages single data frame. Updates global state variables pagination information. relies global variables qbms_globals manage state configuration.","code":""},{"path":"/reference/brapi_get_call.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal Function for Core BrAPI GET Calls — brapi_get_call","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/brapi_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Common HTTP Headers for API Requests — brapi_headers","title":"Generate Common HTTP Headers for API Requests — brapi_headers","text":"function constructs list standard HTTP headers required making API  requests, ensuring proper authentication encoding. headers typically  included API call provide necessary information authorization  tokens content acceptance types. function designed work  authenticated APIs, including BrAPI.","code":""},{"path":"/reference/brapi_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Common HTTP Headers for API Requests — brapi_headers","text":"","code":"brapi_headers()"},{"path":"/reference/brapi_headers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Common HTTP Headers for API Requests — brapi_headers","text":"named list common HTTP headers, including authorization token (Bearer),  content encoding, accepted content types. named list containing key HTTP headers, including: Authorization: Bearer token used authenticated API access. Accept-Encoding: Specifies supported compression types gzip deflate. Accept: Specifies client accepts responses JSON format.","code":""},{"path":"/reference/brapi_headers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate Common HTTP Headers for API Requests — brapi_headers","text":"Ensure global state contains valid authorization token making API  requests. function retrieves token `qbms_globals$state$token`,  set successful login authentication process.","code":""},{"path":"/reference/brapi_headers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Common HTTP Headers for API Requests — brapi_headers","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/brapi_map.html","id":null,"dir":"Reference","previous_headings":"","what":"BrAPI Mapping Table — brapi_map","title":"BrAPI Mapping Table — brapi_map","text":"internal table maps QBMS function names corresponding BrAPI calls different versions BrAPI standard. used internally QBMS system translate function calls BrAPI-compliant API requests.","code":""},{"path":"/reference/brapi_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BrAPI Mapping Table — brapi_map","text":"","code":"brapi_map"},{"path":"/reference/brapi_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BrAPI Mapping Table — brapi_map","text":"object class data.frame 37 rows 3 columns.","code":""},{"path":"/reference/brapi_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BrAPI Mapping Table — brapi_map","text":"table supports BrAPI v1 v2 endpoints. regularly updated reflect changes BrAPI standard inclusion new API calls.","code":""},{"path":"/reference/brapi_post_search_allelematrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Function Used for Core BrAPI POST Calls (Allele Matrix Search) — brapi_post_search_allelematrix","title":"Internal Function Used for Core BrAPI POST Calls (Allele Matrix Search) — brapi_post_search_allelematrix","text":"function used internally execute POST calls retrieving allele matrix via BrAPI. handles post request, waits results asynchronously required, processes results.","code":""},{"path":"/reference/brapi_post_search_allelematrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Function Used for Core BrAPI POST Calls (Allele Matrix Search) — brapi_post_search_allelematrix","text":"","code":"brapi_post_search_allelematrix(call_url, call_body, nested = TRUE)"},{"path":"/reference/brapi_post_search_allelematrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Function Used for Core BrAPI POST Calls (Allele Matrix Search) — brapi_post_search_allelematrix","text":"call_url BrAPI URL POST request. call_body request body send POST request. nested Logical indicating whether flatten nested structure. Default TRUE.","code":""},{"path":"/reference/brapi_post_search_allelematrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Function Used for Core BrAPI POST Calls (Allele Matrix Search) — brapi_post_search_allelematrix","text":"list results obtained BrAPI POST call.","code":""},{"path":"/reference/brapi_post_search_allelematrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal Function Used for Core BrAPI POST Calls (Allele Matrix Search) — brapi_post_search_allelematrix","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/brapi_post_search_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Function Used for Core BrAPI POST Calls — brapi_post_search_call","title":"Internal Function Used for Core BrAPI POST Calls — brapi_post_search_call","text":"function used internally execute POST calls BrAPI endpoints retrieve results handling pagination long-running tasks.","code":""},{"path":"/reference/brapi_post_search_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Function Used for Core BrAPI POST Calls — brapi_post_search_call","text":"","code":"brapi_post_search_call(call_url, call_body, nested = TRUE)"},{"path":"/reference/brapi_post_search_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Function Used for Core BrAPI POST Calls — brapi_post_search_call","text":"call_url BrAPI URL POST request. call_body request body send POST request. nested Logical indicating whether flatten nested structure. Default TRUE.","code":""},{"path":"/reference/brapi_post_search_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Function Used for Core BrAPI POST Calls — brapi_post_search_call","text":"list results obtained BrAPI POST call.","code":""},{"path":"/reference/brapi_post_search_call.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal Function Used for Core BrAPI POST Calls — brapi_post_search_call","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/build_pedigree_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Building Pedigree Table Recursively — build_pedigree_table","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"Recursively builds pedigree table extracting tracking parents genotype/germplasm provided list. function handles backcross cases updates pedigree data frame parent information multiple generations.","code":""},{"path":"/reference/build_pedigree_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"","code":"build_pedigree_table(   geno_list = NULL,   pedigree_list = NULL,   pedigree_df = NULL )"},{"path":"/reference/build_pedigree_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"geno_list character vector genotype/germplasm names. pedigree_list character vector associated pedigree strings, corresponding genotypes geno_list. pedigree_df data frame pedigrees previous iteration, used accumulate pedigree data. NULL, new data frame created.","code":""},{"path":"/reference/build_pedigree_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"data frame three columns:   - `Variety`: identifier individual genotype.   - `Female`: identifier female parent.   - `Male`: identifier male parent. pedigree built recursively, individuals listed appearance parent.","code":""},{"path":"/reference/build_pedigree_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Building Pedigree Table Recursively — build_pedigree_table","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/calc_biovars.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Bioclimatic Variables — calc_biovars","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"function calculates 19 standard bioclimatic variables derived monthly temperature precipitation data. Bioclimatic variables often used ecological modeling species distribution modeling capture biologically meaningful patterns climate data, including annual trends, seasonality, extreme environmental factors. bioclimatic variables represent metrics annual mean temperature, temperature seasonality, precipitation patterns (e.g., wettest driest quarter). metrics help model species distributions analyze ecological dynamics. bioclimatic variables coded follows: BIO1 = Annual Mean Temperature BIO2 = Mean Diurnal Range (Mean monthly (max temp - min temp)) BIO3 = Isothermality (BIO2/BIO7) (* 100) BIO4 = Temperature Seasonality (standard deviation * 100) BIO5 = Max Temperature Warmest Month BIO6 = Min Temperature Coldest Month BIO7 = Temperature Annual Range (BIO5 - BIO6) BIO8 = Mean Temperature Wettest Quarter BIO9 = Mean Temperature Driest Quarter BIO10 = Mean Temperature Warmest Quarter BIO11 = Mean Temperature Coldest Quarter BIO12 = Annual Precipitation BIO13 = Precipitation Wettest Month BIO14 = Precipitation Driest Month BIO15 = Precipitation Seasonality (Coefficient Variation) BIO16 = Precipitation Wettest Quarter BIO17 = Precipitation Driest Quarter BIO18 = Precipitation Warmest Quarter BIO19 = Precipitation Coldest Quarter variables computed using temperature precipitation data standard format, critical understanding species habitats effects climate ecosystems. work derived dismo R package.","code":""},{"path":"/reference/calc_biovars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"","code":"calc_biovars(data)"},{"path":"/reference/calc_biovars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"data data frame containing monthly climate data. data frame must include: year: year set monthly data. ppt: Monthly precipitation values (mm). tmin: Monthly minimum temperature values (degrees Celsius). tmax: Monthly maximum temperature values (degrees Celsius). data contain 12 rows (one month January December) per year, columns sorted order year, ppt, tmin, tmax.","code":""},{"path":"/reference/calc_biovars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"data frame 19 columns representing bioclimatic variables (BIO1 BIO19) additional column year. output data frame provides one row per year, column corresponding one bioclimatic variables described .","code":""},{"path":"/reference/calc_biovars.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"Nix, 1986. biogeographic analysis Australian elapid snakes. : R. Longmore (ed.). Atlas elapid snakes Australia. Australian Flora Fauna Series 7. Australian Government Publishing Service, Canberra.","code":""},{"path":"/reference/calc_biovars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the Bioclimatic Variables — calc_biovars","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org) Robert Hijmans, Museum Vertebrate Zoology, UC Berkeley","code":""},{"path":"/reference/debug_qbms.html","id":null,"dir":"Reference","previous_headings":"","what":"Debug Internal QBMS Status Object — debug_qbms","title":"Debug Internal QBMS Status Object — debug_qbms","text":"Retrieves internal QBMS status object debugging purposes. object contains current configuration state QBMS session, including connection settings active tokens.","code":""},{"path":"/reference/debug_qbms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debug Internal QBMS Status Object — debug_qbms","text":"","code":"debug_qbms()"},{"path":"/reference/debug_qbms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debug Internal QBMS Status Object — debug_qbms","text":"environment object holds current QBMS configuration state.","code":""},{"path":"/reference/debug_qbms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Debug Internal QBMS Status Object — debug_qbms","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/debug_qbms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Debug Internal QBMS Status Object — debug_qbms","text":"","code":"if (interactive()) {   obj <- debug_qbms()   obj$config   obj$state }"},{"path":"/reference/get_async_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronously Fetch a Single API Page — get_async_page","title":"Asynchronously Fetch a Single API Page — get_async_page","text":"Sends asynchronous HTTP GET request fetch data single API page.","code":""},{"path":"/reference/get_async_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronously Fetch a Single API Page — get_async_page","text":"","code":"get_async_page(full_url, nested)"},{"path":"/reference/get_async_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronously Fetch a Single API Page — get_async_page","text":"full_url Character string specifying full URL API endpoint request. nested Logical value indicating whether flatten nested lists JSON response.","code":""},{"path":"/reference/get_async_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronously Fetch a Single API Page — get_async_page","text":"future representing asynchronous operation, resolve list containing parsed JSON response.","code":""},{"path":"/reference/get_async_page.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asynchronously Fetch a Single API Page — get_async_page","text":"function uses future::future() perform HTTP GET request asynchronously. retrieves content specified URL, checks HTTP errors, parses JSON response.","code":""},{"path":"/reference/get_async_page.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Asynchronously Fetch a Single API Page — get_async_page","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_async_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Asynchronously Fetch Multiple API Pages — get_async_pages","title":"Asynchronously Fetch Multiple API Pages — get_async_pages","text":"Sends asynchronous HTTP GET requests fetch data multiple API pages concurrently.","code":""},{"path":"/reference/get_async_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asynchronously Fetch Multiple API Pages — get_async_pages","text":"","code":"get_async_pages(pages, nested)"},{"path":"/reference/get_async_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asynchronously Fetch Multiple API Pages — get_async_pages","text":"pages Character vector full URLs specifying API endpoints request. nested Logical value indicating whether flatten nested lists JSON responses.","code":""},{"path":"/reference/get_async_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asynchronously Fetch Multiple API Pages — get_async_pages","text":"list parsed JSON responses page.","code":""},{"path":"/reference/get_async_pages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Asynchronously Fetch Multiple API Pages — get_async_pages","text":"function uses future.apply::future_lapply() perform concurrent HTTP GET requests multiple pages. retrieves parses JSON responses URL provided.","code":""},{"path":"/reference/get_async_pages.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Asynchronously Fetch Multiple API Pages — get_async_pages","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_brapi_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the BrAPI Endpoint URL for a given QBMS function — get_brapi_url","title":"Get the BrAPI Endpoint URL for a given QBMS function — get_brapi_url","text":"Constructs BrAPI endpoint URL given QBMS function based configured server, crop, BrAPI version. function name mapped corresponding BrAPI call using internal mapping.","code":""},{"path":"/reference/get_brapi_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the BrAPI Endpoint URL for a given QBMS function — get_brapi_url","text":"","code":"get_brapi_url(func_name)"},{"path":"/reference/get_brapi_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the BrAPI Endpoint URL for a given QBMS function — get_brapi_url","text":"func_name (string) name QBMS function BrAPI endpoint URL required.","code":""},{"path":"/reference/get_brapi_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the BrAPI Endpoint URL for a given QBMS function — get_brapi_url","text":"string representing BrAPI endpoint URL.","code":""},{"path":"/reference/get_brapi_url.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the BrAPI Endpoint URL for a given QBMS function — get_brapi_url","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_crop_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of locations information of the current selected crop — get_crop_locations","title":"Get the list of locations information of the current selected crop — get_crop_locations","text":"function retrieve locations information current active crop configured internal state object using `set_crop()` function.","code":""},{"path":"/reference/get_crop_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of locations information of the current selected crop — get_crop_locations","text":"","code":"get_crop_locations()"},{"path":"/reference/get_crop_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the list of locations information of the current selected crop — get_crop_locations","text":"data frame locations information","code":""},{"path":[]},{"path":"/reference/get_crop_locations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of locations information of the current selected crop — get_crop_locations","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_germplasm_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Attributes for a Specified Germplasm — get_germplasm_attributes","title":"Retrieve Attributes for a Specified Germplasm — get_germplasm_attributes","text":"Retrieves detailed list attributes given germplasm, origin, donors, taxonomic information.","code":""},{"path":"/reference/get_germplasm_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Attributes for a Specified Germplasm — get_germplasm_attributes","text":"","code":"get_germplasm_attributes(germplasm_name = \"\")"},{"path":"/reference/get_germplasm_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Attributes for a Specified Germplasm — get_germplasm_attributes","text":"germplasm_name name germplasm.","code":""},{"path":"/reference/get_germplasm_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Attributes for a Specified Germplasm — get_germplasm_attributes","text":"data frame containing attributes associated specified germplasm.","code":""},{"path":[]},{"path":"/reference/get_germplasm_attributes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Attributes for a Specified Germplasm — get_germplasm_attributes","text":"Johan Steven Aparicio, j.aparicio@cgiar.org","code":""},{"path":"/reference/get_germplasm_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Attributes for a Specified Germplasm — get_germplasm_attributes","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   germplasm_attributes <- get_germplasm_attributes(\"Jabal\") }"},{"path":"/reference/get_germplasm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Observations Data for a Specified Germplasm. — get_germplasm_data","title":"Retrieve Observations Data for a Specified Germplasm. — get_germplasm_data","text":"Retrieves available observations data given germplasm current active crop. data aggregated across trials crop database.","code":""},{"path":"/reference/get_germplasm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Observations Data for a Specified Germplasm. — get_germplasm_data","text":"","code":"get_germplasm_data(germplasm_name = \"\")"},{"path":"/reference/get_germplasm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Observations Data for a Specified Germplasm. — get_germplasm_data","text":"germplasm_name name germplasm.","code":""},{"path":"/reference/get_germplasm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Observations Data for a Specified Germplasm. — get_germplasm_data","text":"data frame containing available observations data specified germplasm.","code":""},{"path":[]},{"path":"/reference/get_germplasm_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Observations Data for a Specified Germplasm. — get_germplasm_data","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_germplasm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Observations Data for a Specified Germplasm. — get_germplasm_data","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   germplasm_observations <- get_germplasm_data(\"Jabal\")   head(germplasm_observations) }"},{"path":"/reference/get_germplasm_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Germplasm ID for a Specified Germplasm Name — get_germplasm_id","title":"Get Germplasm ID for a Specified Germplasm Name — get_germplasm_id","text":"Retrieves unique germplasm ID associated specified germplasm name current active crop.","code":""},{"path":"/reference/get_germplasm_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Germplasm ID for a Specified Germplasm Name — get_germplasm_id","text":"","code":"get_germplasm_id(germplasm_name = \"\")"},{"path":"/reference/get_germplasm_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Germplasm ID for a Specified Germplasm Name — get_germplasm_id","text":"germplasm_name name germplasm.","code":""},{"path":"/reference/get_germplasm_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Germplasm ID for a Specified Germplasm Name — get_germplasm_id","text":"string representing germplasm's unique ID (germplasmDbId).","code":""},{"path":[]},{"path":"/reference/get_germplasm_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Germplasm ID for a Specified Germplasm Name — get_germplasm_id","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_germplasm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Germplasm List of the Current Active Study — get_germplasm_list","title":"Get the Germplasm List of the Current Active Study — get_germplasm_list","text":"Retrieves list germplasm (genetic material) used currently active study, must set using set_study function.","code":""},{"path":"/reference/get_germplasm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Germplasm List of the Current Active Study — get_germplasm_list","text":"","code":"get_germplasm_list()"},{"path":"/reference/get_germplasm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Germplasm List of the Current Active Study — get_germplasm_list","text":"data frame containing germplasm list active study.","code":""},{"path":[]},{"path":"/reference/get_germplasm_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Germplasm List of the Current Active Study — get_germplasm_list","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_germplasm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Germplasm List of the Current Active Study — get_germplasm_list","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")   set_trial(\"IDYT39\")   set_study(\"IDYT39 Environment Number 9\")   germplasm <- get_germplasm_list()   head(germplasm) }"},{"path":"/reference/get_hwsd2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get HWSD v2 Soil Data for a Given Location(s) — get_hwsd2","title":"Get HWSD v2 Soil Data for a Given Location(s) — get_hwsd2","text":"Queries HWSD v2 database retrieve soil information specific locations based coordinates. location, function extracts Soil Mapping Unit (SMU) code retrieves soil attributes based specified sequence (soil dominance) depth layer. function returns input data frame augmented soil data HWSDv2 dataset. HWSD2_SMU table contains general information soil units occurring given SMU code (dominant soil unit 11 associated soils). SEQUENCE column refers sequence soil units within SMU presented (order percentage share). dominant soil sequence 1. sequence can range 1 12. SHARE column refers share soil unit within mapping unit percentage. Shares soil units within mapping unit always sum 100 percent. HWSD2_LAYERS table provides soil attributes per depth layer seven depth layers (D1 D7) separately (represented LAYER column HWSD2_LAYERS table). depth top bottom layer defined TOPDEP BOTDEP columns, respectively.","code":""},{"path":"/reference/get_hwsd2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get HWSD v2 Soil Data for a Given Location(s) — get_hwsd2","text":"","code":"get_hwsd2(df, con, x = \"longitude\", y = \"latitude\", sequence = 1, layer = \"D1\")"},{"path":"/reference/get_hwsd2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get HWSD v2 Soil Data for a Given Location(s) — get_hwsd2","text":"df data frame containing location information, including longitude latitude decimal degrees. con HWSDv2 object returned ini_hwsd2() function, containing raster SQLite connection. x column name data frame representing longitude (default 'Longitude'). y column name data frame representing latitude (default 'Latitude'). sequence Integer indicating soil unit's dominance order within SMU (default 1 dominant soil). Valid values range 1 12. layer String indicating depth layer soil attributes retrieved (default 'D1', layers ranging 'D1' 'D7').","code":""},{"path":"/reference/get_hwsd2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get HWSD v2 Soil Data for a Given Location(s) — get_hwsd2","text":"data frame original location data augmented soil attributes specified sequence layer. data frame includes additional columns `smu_id`, `SEQUENCE`, `LAYER`, soil attributes.","code":""},{"path":[]},{"path":"/reference/get_hwsd2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get HWSD v2 Soil Data for a Given Location(s) — get_hwsd2","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_hwsd2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get HWSD v2 Soil Data for a Given Location(s) — get_hwsd2","text":"","code":"if (interactive()) {   Location  <- c('Tel-Hadya', 'Terbol', 'Marchouch')   Latitude  <- c(36.016, 33.808, 33.616)   Longitude <- c(36.943, 35.991, -6.716)   sites     <- data.frame(Location, Latitude, Longitude)      hwsd2 <- ini_hwsd2(data_path = 'C:/Users/Kel-shamaa/Downloads/HWSD v2/')   sites <- get_hwsd2(df = sites, con = hwsd2, x = 'Longitude', y = 'Latitude',                       sequence = 1, layer = 'D1') }"},{"path":"/reference/get_login_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Login Pop-Up Window — get_login_details","title":"Login Pop-Up Window — get_login_details","text":"Opens GUI pop-window using Tcl/Tk prompt user username password. window title prompt message adapt based type server used (e.g., BMS, GIGWA).","code":""},{"path":"/reference/get_login_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login Pop-Up Window — get_login_details","text":"","code":"get_login_details()"},{"path":"/reference/get_login_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login Pop-Up Window — get_login_details","text":"vector containing inserted username password, names usr pwd respectively.","code":""},{"path":"/reference/get_login_details.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login Pop-Up Window — get_login_details","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_marker_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Get marker position information — get_marker_map","title":"Get marker position information — get_marker_map","text":"Retrieves genetic marker map associated currently active study. includes marker name, chromosome (linkage group), position.","code":""},{"path":"/reference/get_marker_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get marker position information — get_marker_map","text":"","code":"get_marker_map()"},{"path":"/reference/get_marker_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get marker position information — get_marker_map","text":"data frame three columns: rs# Marker name (variant name) chrom Chromosome linkage group name pos Genetic physical position marker","code":""},{"path":[]},{"path":"/reference/get_marker_map.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get marker position information — get_marker_map","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Direct Parents — get_parents","title":"Get Direct Parents — get_parents","text":"Utility function split given pedigree string retrieve pedigrees direct parents (female male). function handles different formats cross representations, single slashes (/), double slashes (//), numbered crosses (e.g., /3/). extracts highest cross order available returns sub-pedigree immediate parents.","code":""},{"path":"/reference/get_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Direct Parents — get_parents","text":"","code":"get_parents(pedigree)"},{"path":"/reference/get_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Direct Parents — get_parents","text":"pedigree string providing parentage cultivar obtained.","code":""},{"path":"/reference/get_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Direct Parents — get_parents","text":"vector two items representing direct female male parents. parent information unavailable unknown, `NA` returned respective parent.","code":""},{"path":"/reference/get_parents.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Direct Parents — get_parents","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_pedigree_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Pedigree Table — get_pedigree_table","title":"Get the Pedigree Table — get_pedigree_table","text":"Retrieves comprehensive pedigree table given dataset, contains genotype names pedigree strings. function recursively traces parentage across generations builds pedigree table row corresponds individual, columns female male parents. also handles cases similar genotype names standardizing .","code":""},{"path":"/reference/get_pedigree_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Pedigree Table — get_pedigree_table","text":"","code":"get_pedigree_table(   data,   geno_column = \"germplasmName\",   pedigree_column = \"pedigree\" )"},{"path":"/reference/get_pedigree_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Pedigree Table — get_pedigree_table","text":"data data frame containing genotype/germplasm data, including names pedigree strings. geno_column name column identifies genotype/germplasm names. pedigree_column name column contains pedigree strings.","code":""},{"path":"/reference/get_pedigree_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Pedigree Table — get_pedigree_table","text":"data frame three columns:   - `Variety`: identifier individual genotype.   - `Female`: identifier female parent.   - `Male`: identifier male parent. pedigree table sorted individuals appear row listed parent. founders (.e., individuals parent information), `NA` used parental columns.","code":""},{"path":"/reference/get_pedigree_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Pedigree Table — get_pedigree_table","text":"Khaled Al-Shamaa, k.el-shamaa@cgiar.org","code":""},{"path":"/reference/get_pedigree_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Pedigree Table — get_pedigree_table","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")   set_trial(\"IDYT39\")   set_study(\"IDYT39 Environment Number 9\")   germplasm <- get_germplasm_list()   pedigree_table <- get_pedigree_table(germplasm, \"germplasmName\", \"pedigree\")    #############################   # nadiv package way   # library(nadiv)    # Get additive relationship matrix in sparse matrix format   # A <- nadiv::makeA(pedigree_table)    # Get A inverse matrix using base R function   # AINV <- solve(as.matrix(A))    #############################   # ASReml-R package way   # library(asreml)    # Represent A inverse matrix in an efficient way using i, j index and Ainverse value   # Actual genotype names of any given index are in the attr(ainv, \"rowNames\")   # ainv <- asreml::ainverse(pedigree_table)    #############################   # Dummy data set for testing   test <- data.frame(genotype = c(\"X\", \"Y\"),                      pedigree = c(\"A//B/D/2/C\", \"B/C/3/A//B/C/2/D\"))    pedigree_table <- get_pedigree_table(test, \"genotype\", \"pedigree\") }"},{"path":"/reference/get_program_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the List of Trials, Studies, and Locations Information for the Current Selected Program — get_program_studies","title":"Get the List of Trials, Studies, and Locations Information for the Current Selected Program — get_program_studies","text":"Retrieves comprehensive information trials, studies, environments/locations within current active breeding program, configured internal state object using set_program function. includes test check entry counts study.","code":""},{"path":"/reference/get_program_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the List of Trials, Studies, and Locations Information for the Current Selected Program — get_program_studies","text":"","code":"get_program_studies()"},{"path":"/reference/get_program_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the List of Trials, Studies, and Locations Information for the Current Selected Program — get_program_studies","text":"data frame containing detailed information study within program's trials, including trial names, study names, location information, entry counts.","code":""},{"path":[]},{"path":"/reference/get_program_studies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the List of Trials, Studies, and Locations Information for the Current Selected Program — get_program_studies","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_program_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the List of Trials, Studies, and Locations Information for the Current Selected Program — get_program_studies","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")   program_studies <- get_program_studies()   head(program_studies) }"},{"path":"/reference/get_program_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the List of Trials for the Active Breeding Program — get_program_trials","title":"Retrieve the List of Trials for the Active Breeding Program — get_program_trials","text":"internal function retrieves list trials currently active breeding program crop combination. crop program must set using set_crop set_program prior calling function.","code":""},{"path":"/reference/get_program_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the List of Trials for the Active Breeding Program — get_program_trials","text":"","code":"get_program_trials()"},{"path":"/reference/get_program_trials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the List of Trials for the Active Breeding Program — get_program_trials","text":"data frame containing information trials active breeding program.","code":""},{"path":[]},{"path":"/reference/get_program_trials.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve the List of Trials for the Active Breeding Program — get_program_trials","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_qbms_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the QBMS Connection — get_qbms_connection","title":"Get the QBMS Connection — get_qbms_connection","text":"Retrieves current QBMS connection object, contains server's configuration state, including active sessions tokens. can used save restore connections sessions.","code":""},{"path":"/reference/get_qbms_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the QBMS Connection — get_qbms_connection","text":"","code":"get_qbms_connection()"},{"path":"/reference/get_qbms_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the QBMS Connection — get_qbms_connection","text":"list containing current QBMS configuration state.","code":""},{"path":[]},{"path":"/reference/get_qbms_connection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the QBMS Connection — get_qbms_connection","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_qbms_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the QBMS Connection — get_qbms_connection","text":"","code":"if(interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")      login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")      df1  <- get_germplasm_data(\"Jabal\")   con1 <- get_qbms_connection()      set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\", engine = \"gigwa\", no_auth = TRUE)      gigwa_set_db(\"DIVRICE_NB\")   gigwa_set_project(\"refNB\")   gigwa_set_run(\"03052022\")      df2  <- gigwa_get_metadata()   con2 <- get_qbms_connection()      set_qbms_connection(con1)   df3 <- get_germplasm_attributes(\"Jabal\") }"},{"path":"/reference/get_study_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Observations Data of the Current Active Study — get_study_data","title":"Get the Observations Data of the Current Active Study — get_study_data","text":"Retrieves observations data (e.g., measurements, variables) active study, must set using set_study function.","code":""},{"path":"/reference/get_study_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Observations Data of the Current Active Study — get_study_data","text":"","code":"get_study_data()"},{"path":"/reference/get_study_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Observations Data of the Current Active Study — get_study_data","text":"data frame containing observation data active study, NULL data available.","code":""},{"path":[]},{"path":"/reference/get_study_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Observations Data of the Current Active Study — get_study_data","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_study_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Observations Data of the Current Active Study — get_study_data","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")   set_trial(\"IDYT39\")   set_study(\"IDYT39 Environment Number 9\")   data <- get_study_data()   head(data) }"},{"path":"/reference/get_study_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Details/Metadata of the Current Active Study — get_study_info","title":"Get the Details/Metadata of the Current Active Study — get_study_info","text":"Retrieves detailed metadata currently active study. study must set using set_study function, details fetched BrAPI server.","code":""},{"path":"/reference/get_study_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Details/Metadata of the Current Active Study — get_study_info","text":"","code":"get_study_info()"},{"path":"/reference/get_study_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Details/Metadata of the Current Active Study — get_study_info","text":"data frame containing metadata active study. Returns NULL study metadata available.","code":""},{"path":[]},{"path":"/reference/get_study_info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Details/Metadata of the Current Active Study — get_study_info","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_study_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Details/Metadata of the Current Active Study — get_study_info","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")   set_trial(\"IDYT39\")   set_study(\"IDYT39 Environment Number 9\")   info <- get_study_info() }"},{"path":"/reference/get_terraclimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get TerraClimate Data for a Given Coordinate(s) — get_terraclimate","title":"Get TerraClimate Data for a Given Coordinate(s) — get_terraclimate","text":"function allows extract climate variables TerraClimate dataset specific geographic coordinates. TerraClimate global dataset monthly climate data covering years 1958-present. function retrieves climate variables directly hosting server provided University Idaho, avoiding need download large raster files netCDF format. Additionally, function calculates bioclimatic variables using calc_biovars function, derived dismo R package. TerraClimate dataset compared WorldClim several aspects: TerraClimate: 1958-present vs. WorldClim: 1970-2000 14 climate variables vs. 7 climate variables WorldClim Spatial resolution: ~4 km (TerraClimate) vs. ~1 km (WorldClim) Need calculate bioclimatic variables (TerraClimate) vs. pre-calculated (WorldClim)","code":""},{"path":"/reference/get_terraclimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get TerraClimate Data for a Given Coordinate(s) — get_terraclimate","text":"","code":"get_terraclimate(   lat,   lon,   from = \"1958-01-01\",   to = \"2022-12-31\",   clim_vars = NULL,   month_mask = NULL,   offline = FALSE,   data_path = \"./data/\" )"},{"path":"/reference/get_terraclimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get TerraClimate Data for a Given Coordinate(s) — get_terraclimate","text":"lat Vector Latitude(s) decimal degree format. entry corresponds location interest. lon Vector Longitude(s) decimal degree format. entry corresponds location interest. Start date string 'YYYY-MM-DD' format. Defines beginning time range data extraction. End date string 'YYYY-MM-DD' format. Defines end time range data extraction. clim_vars List climate variables extract. Valid options include: aet, def, pet, ppt, q, soil, srad, swe, tmax, tmin, vap, ws, vpd, PDSI. Default NULL, retrieves variables. month_mask vector specifying months interest, e.g., specific seasons (e.g., planting season: c(10:12, 1:5)). Default NULL, retrieves data months. offline Logical value indicating whether extract TerraClimate data pre-downloaded netCDF files. Default FALSE, meaning data fetched remote server. data_path String specifying directory path downloaded netCDF files stored working offline. Default './data/'.","code":""},{"path":"/reference/get_terraclimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get TerraClimate Data for a Given Coordinate(s) — get_terraclimate","text":"list two data frames coordinate pair (latitude longitude): climate: data frame containing requested climate variables month location. biovars: data frame calculated bioclimatic variables, based extracted climate data. data frame format ready analysis R.","code":""},{"path":"/reference/get_terraclimate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get TerraClimate Data for a Given Coordinate(s) — get_terraclimate","text":"Abatzoglou, J., Dobrowski, S., Parks, S. et al. TerraClimate, high-resolution global dataset monthly climate climatic water balance 1958-2015. Sci Data 5, 170191 (2018). doi:10.1038/sdata.2017.191","code":""},{"path":[]},{"path":"/reference/get_terraclimate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get TerraClimate Data for a Given Coordinate(s) — get_terraclimate","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_terraclimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get TerraClimate Data for a Given Coordinate(s) — get_terraclimate","text":"","code":"if (interactive()) {   # data <- get_terraclimate(36.016, 36.943, '1979-09-01', '2012-06-30',    #                          c('ppt', 'tmin', 'tmax'), c(10:12,1:5))   data <- get_terraclimate(36.016, 36.943, '1979-09-01', '2012-06-30')    View(data$climate[[1]])  # View the climate data   View(data$biovars[[1]])  # View the bioclimatic variables }"},{"path":"/reference/get_trial_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Observations Data of the Current Active Trial — get_trial_data","title":"Get the Observations Data of the Current Active Trial — get_trial_data","text":"Retrieves combined observations data (including studies) current active trial, configured internal state object using set_trial function. function iterates studies within active trial aggregates observation data.","code":""},{"path":"/reference/get_trial_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Observations Data of the Current Active Trial — get_trial_data","text":"","code":"get_trial_data()"},{"path":"/reference/get_trial_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Observations Data of the Current Active Trial — get_trial_data","text":"data frame containing combined observations data studies active trial.","code":""},{"path":[]},{"path":"/reference/get_trial_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Observations Data of the Current Active Trial — get_trial_data","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_trial_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Observations Data of the Current Active Trial — get_trial_data","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")   set_trial(\"IDYT39\")   MET <- get_trial_data()   head(MET) }"},{"path":"/reference/get_trial_obs_ontology.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Traits Ontology/Metadata of the Current Active Trial — get_trial_obs_ontology","title":"Get the Traits Ontology/Metadata of the Current Active Trial — get_trial_obs_ontology","text":"Retrieves traits ontology metadata current active trial, includes detailed information observation variables used trial.","code":""},{"path":"/reference/get_trial_obs_ontology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Traits Ontology/Metadata of the Current Active Trial — get_trial_obs_ontology","text":"","code":"get_trial_obs_ontology()"},{"path":"/reference/get_trial_obs_ontology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Traits Ontology/Metadata of the Current Active Trial — get_trial_obs_ontology","text":"data frame containing traits ontology metadata, filtered observation variables used current trial.","code":""},{"path":[]},{"path":"/reference/get_trial_obs_ontology.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Traits Ontology/Metadata of the Current Active Trial — get_trial_obs_ontology","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_trial_obs_ontology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Traits Ontology/Metadata of the Current Active Trial — get_trial_obs_ontology","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")   set_trial(\"IDYT39\")   ontology <- get_trial_obs_ontology() }"},{"path":"/reference/get_trial_pedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Pedigree table for the Selected Trial — get_trial_pedigree","title":"Get the Pedigree table for the Selected Trial — get_trial_pedigree","text":"Get pedigree table representing pedigree tree currently active trial. row corresponds germplasm entry includes identifiers details parents.","code":""},{"path":"/reference/get_trial_pedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Pedigree table for the Selected Trial — get_trial_pedigree","text":"","code":"get_trial_pedigree()"},{"path":"/reference/get_trial_pedigree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Pedigree table for the Selected Trial — get_trial_pedigree","text":"data frame germplasm parent details selected trial.","code":""},{"path":[]},{"path":"/reference/get_trial_pedigree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Pedigree table for the Selected Trial — get_trial_pedigree","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Marker Matrix from the Selected Variant Set — get_variants","title":"Get Marker Matrix from the Selected Variant Set — get_variants","text":"Get two-dimensional marker matrix samples currently active variant set. function used alternative get_variantset() function server support . Note: approach significantly slower get_variantset fetches data page page BrAPI API, rather downloading full matrix one Falpjack format file.","code":""},{"path":"/reference/get_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Marker Matrix from the Selected Variant Set — get_variants","text":"","code":"get_variants()"},{"path":[]},{"path":"/reference/get_variants.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Marker Matrix from the Selected Variant Set — get_variants","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/get_variantset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Marker Matrix from the Selected Variant Set — get_variantset","title":"Get Marker Matrix from the Selected Variant Set — get_variantset","text":"Downloads two-dimensional marker matrix samples currently active variant set, using efficient Flapjack file format server. Row names correspond marker IDs column names correspond unique sample IDs. Genotype calls returned character format.","code":""},{"path":"/reference/get_variantset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Marker Matrix from the Selected Variant Set — get_variantset","text":"","code":"get_variantset()"},{"path":"/reference/get_variantset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Marker Matrix from the Selected Variant Set — get_variantset","text":"data frame genotype calls character format, markers rows samples columns.","code":""},{"path":[]},{"path":"/reference/get_variantset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Marker Matrix from the Selected Variant Set — get_variantset","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_get_allelematrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Markers Matrix in the Selected GIGWA Run — gigwa_get_allelematrix","title":"Get Markers Matrix in the Selected GIGWA Run — gigwa_get_allelematrix","text":"Retrieve two-dimensional matrix genotype data selected GIGWA run. matrix returned based filters regions, samples, variants. data can simplified use numeric coding genotypes, returned raw VCF-like format.","code":""},{"path":"/reference/gigwa_get_allelematrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Markers Matrix in the Selected GIGWA Run — gigwa_get_allelematrix","text":"","code":"gigwa_get_allelematrix(   samples = NULL,   start = 0,   end = \"\",   chrom = NULL,   snps = NULL,   snps_pageSize = 10000,   samples_pageSize = 100,   simplify = TRUE )"},{"path":"/reference/gigwa_get_allelematrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Markers Matrix in the Selected GIGWA Run — gigwa_get_allelematrix","text":"samples list sample names include (optional). NULL, samples included. start Start position query region (zero-based, inclusive). end End position query region (zero-based, exclusive). chrom Reference sequence name (e.g., chromosome contig). snps list variant names filter (optional). snps_pageSize Number variants fetch per page (default 10,000). samples_pageSize Number samples fetch per page (default 100). simplify Whether simplify returned data using numeric coding (default TRUE).","code":""},{"path":"/reference/gigwa_get_allelematrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Markers Matrix in the Selected GIGWA Run — gigwa_get_allelematrix","text":"data frame rows representing SNP markers columns representing samples. Values numeric codings (0: reference allele, 1: heterozygous, 2: alternative allele).","code":""},{"path":"/reference/gigwa_get_allelematrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Markers Matrix in the Selected GIGWA Run — gigwa_get_allelematrix","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_get_allelematrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Markers Matrix in the Selected GIGWA Run — gigwa_get_allelematrix","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_set_project(\"Nelson_et_al_2011\")   gigwa_set_run(\"run1\")   samples <- gigwa_get_samples()   chroms <- gigwa_get_sequences()   geno_data <- gigwa_get_allelematrix(samples = samples[1:5],                                       start   = 0,                                       end     = 1234567,                                       chrom   = chroms[1:3]) }"},{"path":"/reference/gigwa_get_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Markers Map in the Selected GIGWA Run — gigwa_get_markers","title":"Get Markers Map in the Selected GIGWA Run — gigwa_get_markers","text":"Retrieve filtered list SNP variants selected run. function allows users query variants based chromosomal regions return results simplified format.","code":""},{"path":"/reference/gigwa_get_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Markers Map in the Selected GIGWA Run — gigwa_get_markers","text":"","code":"gigwa_get_markers(start = NULL, end = NULL, chrom = NULL, simplify = TRUE)"},{"path":"/reference/gigwa_get_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Markers Map in the Selected GIGWA Run — gigwa_get_markers","text":"start Start position query region (zero-based, inclusive). end End position query region (zero-based, exclusive). chrom Reference sequence name (e.g., chromosome). simplify Logical, TRUE (default) returns data simplified HapMap-like format columns rs#, alleles, chromosome, position.","code":""},{"path":"/reference/gigwa_get_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Markers Map in the Selected GIGWA Run — gigwa_get_markers","text":"data frame SNP markers, optionally simplified include rs#, alleles, chromosome, position.","code":""},{"path":"/reference/gigwa_get_markers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Markers Map in the Selected GIGWA Run — gigwa_get_markers","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_get_markers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Markers Map in the Selected GIGWA Run — gigwa_get_markers","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_set_project(\"Nelson_et_al_2011\")   gigwa_set_run(\"run1\")   chroms <- gigwa_get_sequences()   geno_map <- gigwa_get_markers(start = 0, end = 12345678, chrom = chroms[7]) }"},{"path":"/reference/gigwa_get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Metadata of the Current Active GIGWA Run — gigwa_get_metadata","title":"Get the Metadata of the Current Active GIGWA Run — gigwa_get_metadata","text":"Retrieve metadata associated samples current active run, set using gigwa_set_run() function. metadata provides additional information samples selected run.","code":""},{"path":"/reference/gigwa_get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Metadata of the Current Active GIGWA Run — gigwa_get_metadata","text":"","code":"gigwa_get_metadata()"},{"path":"/reference/gigwa_get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Metadata of the Current Active GIGWA Run — gigwa_get_metadata","text":"data frame containing metadata attributes sample active run.","code":""},{"path":[]},{"path":"/reference/gigwa_get_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Metadata of the Current Active GIGWA Run — gigwa_get_metadata","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Metadata of the Current Active GIGWA Run — gigwa_get_metadata","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"3kG_10M\")   gigwa_set_project(\"3003_ind\")   gigwa_set_run(\"1\")   metadata <- gigwa_get_metadata() }"},{"path":"/reference/gigwa_get_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Samples List of the Current Active GIGWA Project — gigwa_get_samples","title":"Get the Samples List of the Current Active GIGWA Project — gigwa_get_samples","text":"Retrieve list samples associated currently active GIGWA project, set using gigwa_set_project().","code":""},{"path":"/reference/gigwa_get_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Samples List of the Current Active GIGWA Project — gigwa_get_samples","text":"","code":"gigwa_get_samples()"},{"path":"/reference/gigwa_get_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Samples List of the Current Active GIGWA Project — gigwa_get_samples","text":"vector sample names selected project.","code":""},{"path":[]},{"path":"/reference/gigwa_get_samples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Samples List of the Current Active GIGWA Project — gigwa_get_samples","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_get_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Samples List of the Current Active GIGWA Project — gigwa_get_samples","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_set_project(\"Nelson_et_al_2011\")   samples <- gigwa_get_samples() }"},{"path":"/reference/gigwa_get_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Sequences of the Current Active GIGWA Project — gigwa_get_sequences","title":"Get the Sequences of the Current Active GIGWA Project — gigwa_get_sequences","text":"Retrieve list sequences (e.g., chromosomes) associated currently active project GIGWA, set using `gigwa_set_project()` function.","code":""},{"path":"/reference/gigwa_get_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Sequences of the Current Active GIGWA Project — gigwa_get_sequences","text":"","code":"gigwa_get_sequences()"},{"path":"/reference/gigwa_get_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Sequences of the Current Active GIGWA Project — gigwa_get_sequences","text":"vector sequence names (e.g., chromosome names) selected project.","code":""},{"path":[]},{"path":"/reference/gigwa_get_sequences.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Sequences of the Current Active GIGWA Project — gigwa_get_sequences","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_get_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Sequences of the Current Active GIGWA Project — gigwa_get_sequences","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_set_project(\"Nelson_et_al_2011\")   chroms <- gigwa_get_sequences() }"},{"path":"/reference/gigwa_get_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available Variants in the Selected GIGWA Run — gigwa_get_variants","title":"Get Available Variants in the Selected GIGWA Run — gigwa_get_variants","text":"Retrieve variant data (e.g., SNP markers) selected GIGWA run based filtering criteria, including minor allele frequency, missing data threshold, sample subset.","code":""},{"path":"/reference/gigwa_get_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available Variants in the Selected GIGWA Run — gigwa_get_variants","text":"","code":"gigwa_get_variants(   max_missing = 1,   min_maf = 0.5,   samples = NULL,   start = NULL,   end = NULL,   referenceName = NULL )"},{"path":"/reference/gigwa_get_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Available Variants in the Selected GIGWA Run — gigwa_get_variants","text":"max_missing maximum allowable missing data ratio, 0 1 (default 1, meaning 100% missing data). min_maf Minimum Minor Allele Frequency (MAF) 0 0.5 (default 0). samples list sample names include query (optional). NULL, samples included. start Start position query region (zero-based, inclusive). end End position query region (zero-based, exclusive). referenceName reference sequence name (e.g., chromosome).","code":""},{"path":"/reference/gigwa_get_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available Variants in the Selected GIGWA Run — gigwa_get_variants","text":"data frame first 4 columns describe SNP (rs# variant name, alleles, chrom, pos), subsequent columns contain numerical genotyping information (0 reference allele, 1 heterozygous, 2 minor allele).","code":""},{"path":"/reference/gigwa_get_variants.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Available Variants in the Selected GIGWA Run — gigwa_get_variants","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_get_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available Variants in the Selected GIGWA Run — gigwa_get_variants","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_set_project(\"Nelson_et_al_2011\")   gigwa_set_run(\"run1\")   marker_matrix <- gigwa_get_variants(max_missing = 0.2,                                        min_maf = 0.35,                                        samples = c(\"ind1\", \"ind3\", \"ind7\")) }"},{"path":"/reference/gigwa_list_dbs.html","id":null,"dir":"Reference","previous_headings":"","what":"List GIGWA Databases — gigwa_list_dbs","title":"List GIGWA Databases — gigwa_list_dbs","text":"Retrieve list available databases connected GIGWA server. active connection required. connected, function throw error.","code":""},{"path":"/reference/gigwa_list_dbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List GIGWA Databases — gigwa_list_dbs","text":"","code":"gigwa_list_dbs()"},{"path":"/reference/gigwa_list_dbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List GIGWA Databases — gigwa_list_dbs","text":"list databases available connected GIGWA server.","code":""},{"path":[]},{"path":"/reference/gigwa_list_dbs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List GIGWA Databases — gigwa_list_dbs","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_list_dbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List GIGWA Databases — gigwa_list_dbs","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_list_dbs() }"},{"path":"/reference/gigwa_list_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the List of All Projects in the Selected GIGWA Database — gigwa_list_projects","title":"Get the List of All Projects in the Selected GIGWA Database — gigwa_list_projects","text":"Retrieve list projects available currently active GIGWA database, set using gigwa_set_db(). database selected, function throw error.","code":""},{"path":"/reference/gigwa_list_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the List of All Projects in the Selected GIGWA Database — gigwa_list_projects","text":"","code":"gigwa_list_projects()"},{"path":"/reference/gigwa_list_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the List of All Projects in the Selected GIGWA Database — gigwa_list_projects","text":"list project names selected database.","code":""},{"path":[]},{"path":"/reference/gigwa_list_projects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the List of All Projects in the Selected GIGWA Database — gigwa_list_projects","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_list_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the List of All Projects in the Selected GIGWA Database — gigwa_list_projects","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_list_projects() }"},{"path":"/reference/gigwa_list_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the List of the Run Names Available in the Selected GIGWA Project — gigwa_list_runs","title":"Get the List of the Run Names Available in the Selected GIGWA Project — gigwa_list_runs","text":"Retrieve list available runs currently active GIGWA project, set using gigwa_set_project(). project selected, error raised.","code":""},{"path":"/reference/gigwa_list_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the List of the Run Names Available in the Selected GIGWA Project — gigwa_list_runs","text":"","code":"gigwa_list_runs()"},{"path":"/reference/gigwa_list_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the List of the Run Names Available in the Selected GIGWA Project — gigwa_list_runs","text":"list run names associated selected project.","code":""},{"path":[]},{"path":"/reference/gigwa_list_runs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the List of the Run Names Available in the Selected GIGWA Project — gigwa_list_runs","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_list_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the List of the Run Names Available in the Selected GIGWA Project — gigwa_list_runs","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_set_project(\"Nelson_et_al_2011\")   gigwa_list_runs() }"},{"path":"/reference/gigwa_set_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Current Active GIGWA Database by Name — gigwa_set_db","title":"Set the Current Active GIGWA Database by Name — gigwa_set_db","text":"Select GIGWA database active database subsequent operations. updates internal configuration object resets previously selected projects runs.","code":""},{"path":"/reference/gigwa_set_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Current Active GIGWA Database by Name — gigwa_set_db","text":"","code":"gigwa_set_db(db_name)"},{"path":"/reference/gigwa_set_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Current Active GIGWA Database by Name — gigwa_set_db","text":"db_name name database set active.","code":""},{"path":"/reference/gigwa_set_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Current Active GIGWA Database by Name — gigwa_set_db","text":"return value. Updates internal configuration selected database.","code":""},{"path":[]},{"path":"/reference/gigwa_set_db.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Current Active GIGWA Database by Name — gigwa_set_db","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_set_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Current Active GIGWA Database by Name — gigwa_set_db","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\") }"},{"path":"/reference/gigwa_set_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Current Active GIGWA Project — gigwa_set_project","title":"Set the Current Active GIGWA Project — gigwa_set_project","text":"Select project active GIGWA database set current active project internal state. selection used retrieving related data, runs samples.","code":""},{"path":"/reference/gigwa_set_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Current Active GIGWA Project — gigwa_set_project","text":"","code":"gigwa_set_project(project_name)"},{"path":"/reference/gigwa_set_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Current Active GIGWA Project — gigwa_set_project","text":"project_name name project set active.","code":""},{"path":"/reference/gigwa_set_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Current Active GIGWA Project — gigwa_set_project","text":"return value. Updates internal state selected project.","code":""},{"path":[]},{"path":"/reference/gigwa_set_project.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Current Active GIGWA Project — gigwa_set_project","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_set_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Current Active GIGWA Project — gigwa_set_project","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_set_project(\"Nelson_et_al_2011\") }"},{"path":"/reference/gigwa_set_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Current Active GIGWA Run — gigwa_set_run","title":"Set the Current Active GIGWA Run — gigwa_set_run","text":"Select run active GIGWA project set current active run internal state, enabling data retrieval operations.","code":""},{"path":"/reference/gigwa_set_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Current Active GIGWA Run — gigwa_set_run","text":"","code":"gigwa_set_run(run_name)"},{"path":"/reference/gigwa_set_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Current Active GIGWA Run — gigwa_set_run","text":"run_name name run set active.","code":""},{"path":"/reference/gigwa_set_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Current Active GIGWA Run — gigwa_set_run","text":"return value. Updates internal state selected run.","code":""},{"path":[]},{"path":"/reference/gigwa_set_run.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Current Active GIGWA Run — gigwa_set_run","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/gigwa_set_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Current Active GIGWA Run — gigwa_set_run","text":"","code":"if (interactive()) {   set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\",                    time_out = 300, engine = \"gigwa\", no_auth = TRUE)   gigwa_set_db(\"Sorghum-JGI_v1\")   gigwa_set_project(\"Nelson_et_al_2011\")   gigwa_set_run(\"run1\") }"},{"path":"/reference/ini_hwsd2.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Setup HWSD v2.0 Data Files to Extract their Data Offline — ini_hwsd2","title":"Download and Setup HWSD v2.0 Data Files to Extract their Data Offline — ini_hwsd2","text":"Downloads sets HWSD v2.0 data files required extract soil data offline. function retrieves HWSD raster soil unit map SQLite database containing soil attributes. files already exist specified directory, used directly. function returns object raster SQLite connection queries.","code":""},{"path":"/reference/ini_hwsd2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Setup HWSD v2.0 Data Files to Extract their Data Offline — ini_hwsd2","text":"","code":"ini_hwsd2(data_path = \"./data/\", timeout = 300)"},{"path":"/reference/ini_hwsd2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Setup HWSD v2.0 Data Files to Extract their Data Offline — ini_hwsd2","text":"data_path String specifying directory path HWSD v2.0 data files stored downloaded (default './data/'). timeout Timeout seconds downloading HWSD v2.0 data file (default 300).","code":""},{"path":"/reference/ini_hwsd2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Setup HWSD v2.0 Data Files to Extract their Data Offline — ini_hwsd2","text":"list object (`con`) containing two items:   - `raster`: HWSDv2 raster object spatial queries.   - `sqlite`: Connection HWSDv2 SQLite database.","code":""},{"path":[]},{"path":"/reference/ini_hwsd2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download and Setup HWSD v2.0 Data Files to Extract their Data Offline — ini_hwsd2","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/ini_hwsd2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Setup HWSD v2.0 Data Files to Extract their Data Offline — ini_hwsd2","text":"","code":"if (interactive()) {   hwsd2 <- ini_hwsd2(data_path = 'C:/Users/Kel-shamaa/Downloads/HWSD v2/') }"},{"path":"/reference/ini_terraclimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Download TerraClimate netCDF Data Files to Extract their Data Offline — ini_terraclimate","title":"Download TerraClimate netCDF Data Files to Extract their Data Offline — ini_terraclimate","text":"function facilitates download TerraClimate netCDF files specified time period climate variables. TerraClimate data provides monthly climate data global terrestrial surfaces, function allows store data locally offline extraction analysis without need download entire dataset. Users can specify range climate variables precipitation, temperature, evapotranspiration, soil moisture, . downloaded files saved netCDF format, making accessible subsequent offline analysis.","code":""},{"path":"/reference/ini_terraclimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download TerraClimate netCDF Data Files to Extract their Data Offline — ini_terraclimate","text":"","code":"ini_terraclimate(   from = \"2019-09-01\",   to = \"2022-06-30\",   clim_vars = c(\"ppt\", \"tmin\", \"tmax\"),   data_path = \"./data/\",   timeout = 300 )"},{"path":"/reference/ini_terraclimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download TerraClimate netCDF Data Files to Extract their Data Offline — ini_terraclimate","text":"Start date string 'YYYY-MM-DD' format. defines beginning time period want download climate data. End date string 'YYYY-MM-DD' format. defines end time period want download climate data. clim_vars list climate variables download. Valid options include: aet (Actual Evapotranspiration), def (Climate Water Deficit), pet (Potential Evapotranspiration), ppt (Precipitation), q (Runoff), soil (Soil Moisture), srad (Solar Radiation), swe (Snow Water Equivalent), tmax (Maximum Temperature), tmin (Minimum Temperature), vap (Vapor Pressure), ws (Wind Speed), vpd (Vapor Pressure Deficit), PDSI (Palmer Drought Severity Index). NULL (default), available variables downloaded. data_path string containing directory path downloaded netCDF files stored. default path './data/'. timeout Timeout seconds downloading netCDF raster file. default value 300 seconds.","code":""},{"path":"/reference/ini_terraclimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download TerraClimate netCDF Data Files to Extract their Data Offline — ini_terraclimate","text":"explicit return value. downloaded netCDF files saved specified directory offline use get_terraclimate function extract data given coordinate set coordinates.","code":""},{"path":[]},{"path":"/reference/ini_terraclimate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download TerraClimate netCDF Data Files to Extract their Data Offline — ini_terraclimate","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/ini_terraclimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download TerraClimate netCDF Data Files to Extract their Data Offline — ini_terraclimate","text":"","code":"if (interactive()) {   # Initialize TerraClimate data download for specific climate variables between two dates   ini_terraclimate('2018-09-01', '2019-06-30', c('ppt', 'tmin', 'tmax'))      # Coordinates for the location(s) of interest   x <- c(-6.716, 35.917, 76.884)   y <- c(33.616, 33.833, 23.111)      # Extract TerraClimate data for the specified coordinates (online mode)   a <- get_terraclimate(y, x, '2018-09-01', '2019-06-30', c('ppt', 'tmin', 'tmax'))      # View the extracted climate data and bioclimatic variables   View(a$climate[[1]])   View(a$biovars[[1]])      # Extract TerraClimate data for the specified coordinates (offline mode)   b <- get_terraclimate(y, x, '2018-09-01', '2019-06-30', c('ppt', 'tmin', 'tmax'), offline = TRUE)      # View the offline-extracted data   View(b$climate[[1]])   View(b$biovars[[1]]) }"},{"path":"/reference/list_crops.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Supported Crops from the Server — list_crops","title":"Retrieve Supported Crops from the Server — list_crops","text":"Retrieves list crops supported connected server. crop list cached internal state, returns cached data; otherwise, sends BrAPI GET request fetch crop list.","code":""},{"path":"/reference/list_crops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Supported Crops from the Server — list_crops","text":"","code":"list_crops()"},{"path":"/reference/list_crops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Supported Crops from the Server — list_crops","text":"character vector containing names supported crops.","code":""},{"path":[]},{"path":"/reference/list_crops.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Supported Crops from the Server — list_crops","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/list_crops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Supported Crops from the Server — list_crops","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()  # Log in to the server   list_crops()  # Retrieve list of supported crops }"},{"path":"/reference/list_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the List of Locations Information of the Current Selected Crop — list_locations","title":"Get the List of Locations Information of the Current Selected Crop — list_locations","text":"Retrieves list locations associated current active crop, configured internal state object using set_crop function.","code":""},{"path":"/reference/list_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the List of Locations Information of the Current Selected Crop — list_locations","text":"","code":"list_locations()"},{"path":"/reference/list_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the List of Locations Information of the Current Selected Crop — list_locations","text":"data frame containing information locations relevant current crop.","code":""},{"path":[]},{"path":"/reference/list_locations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the List of Locations Information of the Current Selected Crop — list_locations","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/list_programs.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Breeding Programs for the Active Crop — list_programs","title":"Retrieve Breeding Programs for the Active Crop — list_programs","text":"Retrieves list breeding programs available currently selected crop. crop must set using set_crop function prior calling .","code":""},{"path":"/reference/list_programs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Breeding Programs for the Active Crop — list_programs","text":"","code":"list_programs()"},{"path":"/reference/list_programs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Breeding Programs for the Active Crop — list_programs","text":"data frame containing names breeding programs available active crop.","code":""},{"path":[]},{"path":"/reference/list_programs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Breeding Programs for the Active Crop — list_programs","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/list_programs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Breeding Programs for the Active Crop — list_programs","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()  # Log in to the server   set_crop(\"wheat\")  # Set \"wheat\" as the active crop   list_programs()  # Retrieve breeding programs for the active crop }"},{"path":"/reference/list_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the List of Studies in the Current Active Trial — list_studies","title":"Get the List of Studies in the Current Active Trial — list_studies","text":"Retrieves list studies (associated locations) currently active trial, configured using set_trial function.","code":""},{"path":"/reference/list_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the List of Studies in the Current Active Trial — list_studies","text":"","code":"list_studies()"},{"path":"/reference/list_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the List of Studies in the Current Active Trial — list_studies","text":"data frame containing study names associated location names. studies available, error thrown.","code":""},{"path":"/reference/list_studies.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get the List of Studies in the Current Active Trial — list_studies","text":"function must called trial set using set_trial.","code":""},{"path":[]},{"path":"/reference/list_studies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the List of Studies in the Current Active Trial — list_studies","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/list_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the List of Studies in the Current Active Trial — list_studies","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()  # Log in to the server   set_crop(\"wheat\")  # Set crop   set_program(\"Wheat International Nurseries\")  # Set breeding program   set_trial(\"IDYT39\")  # Set trial   list_studies()  # List studies }"},{"path":"/reference/list_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"List Trials in the Current Active Breeding Program — list_trials","title":"List Trials in the Current Active Breeding Program — list_trials","text":"Retrieves list trials current active breeding program. Optionally, filters trials starting year specified.","code":""},{"path":"/reference/list_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Trials in the Current Active Breeding Program — list_trials","text":"","code":"list_trials(year = NULL)"},{"path":"/reference/list_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Trials in the Current Active Breeding Program — list_trials","text":"year Numeric. optional parameter filter trials starting year. provided, trials active program returned.","code":""},{"path":"/reference/list_trials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Trials in the Current Active Breeding Program — list_trials","text":"data frame containing names trials active breeding program. trials match query, warning issued, NA returned.","code":""},{"path":"/reference/list_trials.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"List Trials in the Current Active Breeding Program — list_trials","text":"year filter supported BMS databases.","code":""},{"path":[]},{"path":"/reference/list_trials.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List Trials in the Current Active Breeding Program — list_trials","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/list_trials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Trials in the Current Active Breeding Program — list_trials","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()  # Log in to the server   set_crop(\"wheat\")  # Set crop   set_program(\"Wheat International Nurseries\")  # Set breeding program   list_trials()  # List trials   list_trials(2022)  # List trials starting in 2022 }"},{"path":"/reference/list_variantsets.html","id":null,"dir":"Reference","previous_headings":"","what":"List Variant Sets in the Selected Study — list_variantsets","title":"List Variant Sets in the Selected Study — list_variantsets","text":"Retrieves names variant sets available currently selected study, set set_study(). study selected, function returns error.","code":""},{"path":"/reference/list_variantsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Variant Sets in the Selected Study — list_variantsets","text":"","code":"list_variantsets()"},{"path":"/reference/list_variantsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Variant Sets in the Selected Study — list_variantsets","text":"list names variant sets associated selected study.","code":""},{"path":[]},{"path":"/reference/list_variantsets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List Variant Sets in the Selected Study — list_variantsets","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/login.html","id":null,"dir":"Reference","previous_headings":"","what":"Login to a BrAPI Server — login","title":"Login to a BrAPI Server — login","text":"Authenticates BrAPI server using username password. credentials provided, interactive prompt request user. function serves wrapper login_* authentication methods accepts additional parameters via ...","code":""},{"path":"/reference/login.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login to a BrAPI Server — login","text":"","code":"login(username = NULL, password = NULL, ...)"},{"path":"/reference/login.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login to a BrAPI Server — login","text":"username username (optional, default NULL). password password (optional, default NULL). ... Additional arguments passed login_oauth2.","code":""},{"path":"/reference/login.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login to a BrAPI Server — login","text":"return value. success, access token stored internally future use.","code":""},{"path":[]},{"path":"/reference/login.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login to a BrAPI Server — login","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/login_bms.html","id":null,"dir":"Reference","previous_headings":"","what":"Login to the Server — login_bms","title":"Login to the Server — login_bms","text":"Connects BMS related server using username password. provided, pop-window prompt user enter credentials. function handles authentication stores resulting access token internally subsequent requests.","code":""},{"path":"/reference/login_bms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login to the Server — login_bms","text":"","code":"login_bms(username = NULL, password = NULL, encoding = \"json\")"},{"path":"/reference/login_bms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login to the Server — login_bms","text":"username username (optional, default NULL). provided, pop-window triggered. password password (optional, default NULL). provided, pop-window triggered. encoding Specifies request body encoded: form (application/x-www-form-urlencoded), multipart (multipart/form-data), json (application/json). Default \"json\".","code":""},{"path":"/reference/login_bms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login to the Server — login_bms","text":"return value. access token stored internally future use.","code":""},{"path":"/reference/login_bms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login to the Server — login_bms","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/login_bms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Login to the Server — login_bms","text":"","code":"if(interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\", engine = \"bms\")      # Login using your BMS account (interactive mode)   login_bms()      # You can pass BMS username and password as parameters (batch mode)   # login_bms(\"username\", \"password\") }"},{"path":"/reference/login_breedbase.html","id":null,"dir":"Reference","previous_headings":"","what":"Login to the BreedBase Server — login_breedbase","title":"Login to the BreedBase Server — login_breedbase","text":"Logs BreedBase server using username password. credentials provided, pop-window prompt user. function wrapper around login_bms() function, encoding set form.","code":""},{"path":"/reference/login_breedbase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login to the BreedBase Server — login_breedbase","text":"","code":"login_breedbase(username = NULL, password = NULL)"},{"path":"/reference/login_breedbase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login to the BreedBase Server — login_breedbase","text":"username username (optional, default NULL). password password (optional, default NULL).","code":""},{"path":"/reference/login_breedbase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login to the BreedBase Server — login_breedbase","text":"return value. access token stored internally future use.","code":""},{"path":"/reference/login_breedbase.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login to the BreedBase Server — login_breedbase","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/login_breedbase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Login to the BreedBase Server — login_breedbase","text":"","code":"if(interactive()) {   set_qbms_config(\"https://cassavabase.org/\", engine = \"breedbase\")      # Login using your BreedBase account (interactive mode)   login_breedbase()       # You can pass BreedBase username and password as parameters (batch mode)    # login_breedbase(\"username\", \"password\") }"},{"path":"/reference/login_germinate.html","id":null,"dir":"Reference","previous_headings":"","what":"Login to the Germinate Server — login_germinate","title":"Login to the Germinate Server — login_germinate","text":"Login Germinate Server","code":""},{"path":"/reference/login_germinate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login to the Germinate Server — login_germinate","text":"","code":"login_germinate(username = NULL, password = NULL)"},{"path":"/reference/login_germinate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login to the Germinate Server — login_germinate","text":"username username (optional, default NULL). password password (optional, default NULL).","code":""},{"path":"/reference/login_germinate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login to the Germinate Server — login_germinate","text":"return value. access token stored internally future use.","code":""},{"path":"/reference/login_germinate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login to the Germinate Server — login_germinate","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/login_gigwa.html","id":null,"dir":"Reference","previous_headings":"","what":"Login to the GIGWA Server — login_gigwa","title":"Login to the GIGWA Server — login_gigwa","text":"Connect GIGWA server. username password parameters missing, login window triggered capture details. connection settings (server URL, port, API path, protocol) read qbms_config() list. function request authentication token server update qbms_state() list token.","code":""},{"path":"/reference/login_gigwa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login to the GIGWA Server — login_gigwa","text":"","code":"login_gigwa(username = NULL, password = NULL)"},{"path":"/reference/login_gigwa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login to the GIGWA Server — login_gigwa","text":"username GIGWA username (optional, default NULL). password GIGWA password (optional, default NULL).","code":""},{"path":"/reference/login_gigwa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login to the GIGWA Server — login_gigwa","text":"return value. authentication token stored internally.","code":""},{"path":"/reference/login_gigwa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login to the GIGWA Server — login_gigwa","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/login_gigwa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Login to the GIGWA Server — login_gigwa","text":"","code":"if (interactive()) {   set_qbms_config(\"http://localhost:59395/gigwa/index.jsp\", time_out = 300, engine = \"gigwa\")    # Login using your GIGWA account (interactive mode)   login_gigwa()      # You can pass GIGWA username and password as parameters (batch mode)   # login_gigwa(\"gigwadmin\", \"nimda\") }"},{"path":"/reference/login_oauth2.html","id":null,"dir":"Reference","previous_headings":"","what":"Login using OAuth 2.0 Authentication — login_oauth2","title":"Login using OAuth 2.0 Authentication — login_oauth2","text":"Performs OAuth 2.0 authentication sending user authorization URL exchanging authorization code access token. function supports caching tokens subsequent requests.","code":""},{"path":"/reference/login_oauth2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login using OAuth 2.0 Authentication — login_oauth2","text":"","code":"login_oauth2(   authorize_url,   access_url,   client_id,   client_secret = NULL,   redirect_uri = \"http://localhost:1410\",   scope = NULL )"},{"path":"/reference/login_oauth2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login using OAuth 2.0 Authentication — login_oauth2","text":"authorize_url URL client redirected user authorization. access_url URL used exchange authorization code access token. client_id client ID (consumer key) provided authorization server. client_secret client secret provided authorization server (optional). redirect_uri URL user redirected authorization (default http://localhost:1410). scope Scopes requested resource owner.","code":""},{"path":"/reference/login_oauth2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login using OAuth 2.0 Authentication — login_oauth2","text":"return value. Updates internal state access token additional details.","code":""},{"path":"/reference/login_oauth2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Login using OAuth 2.0 Authentication — login_oauth2","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/qbms_globals.html","id":null,"dir":"Reference","previous_headings":"","what":"List of non-BrAPI calls in QBMS functions — qbms_globals","title":"List of non-BrAPI calls in QBMS functions — qbms_globals","text":"get_program_studies() /crops/cropName/programs/programUUID/studies/studyId/entries/metadata (BMS: get study entries metadata)","code":""},{"path":"/reference/qbms_globals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of non-BrAPI calls in QBMS functions — qbms_globals","text":"","code":"qbms_globals"},{"path":"/reference/qbms_globals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of non-BrAPI calls in QBMS functions — qbms_globals","text":"object class environment length 2.","code":""},{"path":"/reference/qbms_globals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of non-BrAPI calls in QBMS functions — qbms_globals","text":"get_germplasm_list() /crops/cropName/programs/programUUID/studies/studyId/entries (BMS: get entry type) (POST: body = \"\") gigwa_get_variants() /ga4gh/variants/search dancing steps:  - searchMode = 0 get total - searchMode = 3 request actual results - keep checking progress status /gigwa/progress - call /ga4gh/variants/search get ready results GA4GH: https://rest.ensembl.org/documentation/info/gavariants BrAPI: https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1#/Allele Internal state variables/lists","code":""},{"path":"/reference/rbindlistx.html","id":null,"dir":"Reference","previous_headings":"","what":"Make One Data.Table from a List of Many — rbindlistx","title":"Make One Data.Table from a List of Many — rbindlistx","text":"Performs equivalent .call(\"rbind\", x) data.frames, much faster.","code":""},{"path":"/reference/rbindlistx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make One Data.Table from a List of Many — rbindlistx","text":"","code":"rbindlistx(x)"},{"path":"/reference/rbindlistx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make One Data.Table from a List of Many — rbindlistx","text":"x list containing data.table, data.frame, list objects.","code":""},{"path":"/reference/rbindlistx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make One Data.Table from a List of Many — rbindlistx","text":"unkeyed data.table containing concatenation items passed .","code":""},{"path":"/reference/rbindx.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Data Frames by Row, Filling in Missing Columns — rbindx","title":"Combine Data Frames by Row, Filling in Missing Columns — rbindx","text":"Combines list data frames row, filling missing columns NA.","code":""},{"path":"/reference/rbindx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Data Frames by Row, Filling in Missing Columns — rbindx","text":"","code":"rbindx(..., dfs = list(...))"},{"path":"/reference/rbindx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Data Frames by Row, Filling in Missing Columns — rbindx","text":"... first argument data frame. dfs Input data frames row bind together.","code":""},{"path":"/reference/rbindx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Data Frames by Row, Filling in Missing Columns — rbindx","text":"single data frame.","code":""},{"path":"/reference/scan_brapi_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan BrAPI Endpoints — scan_brapi_endpoints","title":"Scan BrAPI Endpoints — scan_brapi_endpoints","text":"Scans available BrAPI endpoints configured source server checks accessibility. function allows users verify BrAPI endpoints available based provided IDs.","code":""},{"path":"/reference/scan_brapi_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan BrAPI Endpoints — scan_brapi_endpoints","text":"","code":"scan_brapi_endpoints(programDbId = 0, trialDbId = 0, studyDbId = 0)"},{"path":"/reference/scan_brapi_endpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan BrAPI Endpoints — scan_brapi_endpoints","text":"programDbId (numeric) programDbId scan specific program-related endpoints (default 0). trialDbId (numeric) trialDbId scan specific trial-related endpoints (default 0). studyDbId (numeric) studyDbId scan specific study-related endpoints (default 0).","code":""},{"path":"/reference/scan_brapi_endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scan BrAPI Endpoints — scan_brapi_endpoints","text":"data frame listing QBMS function, BrAPI endpoint URL, availability status endpoint.","code":""},{"path":"/reference/scan_brapi_endpoints.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scan BrAPI Endpoints — scan_brapi_endpoints","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/set_crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Current Active Crop — set_crop","title":"Set the Current Active Crop — set_crop","text":"Updates internal configuration set selected crop active one. must called performing crop-specific operations retrieving breeding programs.","code":""},{"path":"/reference/set_crop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Current Active Crop — set_crop","text":"","code":"set_crop(crop_name)"},{"path":"/reference/set_crop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Current Active Crop — set_crop","text":"crop_name string specifying name crop set active.","code":""},{"path":"/reference/set_crop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Current Active Crop — set_crop","text":"return value. function updates global state selected crop.","code":""},{"path":[]},{"path":"/reference/set_crop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Current Active Crop — set_crop","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/set_crop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Current Active Crop — set_crop","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()  # Log in to the server   set_crop(\"wheat\")  # Set \"wheat\" as the active crop }"},{"path":"/reference/set_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Current Active Breeding Program — set_program","title":"Set the Current Active Breeding Program — set_program","text":"Updates internal state set selected breeding program active using associated programDbId. allows subsequent operations carried within context program.","code":""},{"path":"/reference/set_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Current Active Breeding Program — set_program","text":"","code":"set_program(program_name)"},{"path":"/reference/set_program.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Current Active Breeding Program — set_program","text":"program_name string specifying name breeding program set active.","code":""},{"path":"/reference/set_program.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Current Active Breeding Program — set_program","text":"return value. internal state updated selected program.","code":""},{"path":[]},{"path":"/reference/set_program.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Current Active Breeding Program — set_program","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/set_program.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Current Active Breeding Program — set_program","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()  # Log in to the server   set_crop(\"wheat\")  # Set crop   set_program(\"Wheat International Nurseries\")  # Set breeding program }"},{"path":"/reference/set_qbms_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure BMS Server Settings — set_qbms_config","title":"Configure BMS Server Settings — set_qbms_config","text":"Configures BMS server connection settings, including URL, API path, page size, timeout. function allows set connection different server backends like BMS, Gigwa, EBS, Breedbase, choose appropriate BrAPI version.","code":""},{"path":"/reference/set_qbms_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure BMS Server Settings — set_qbms_config","text":"","code":"set_qbms_config(   url = \"http://localhost\",   path = NULL,   page_size = 1000,   time_out = 120,   no_auth = FALSE,   engine = \"bms\",   brapi_ver = \"v1\",   verbose = TRUE )"},{"path":"/reference/set_qbms_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure BMS Server Settings — set_qbms_config","text":"url URL BMS login page API base (default \"http://localhost\"). path API path use (default NULL, sets path based engine). page_size number records per page making API calls (default 1000). time_out maximum number seconds wait response (default 120). no_auth Logical, whether server requires authentication (default FALSE). engine backend system (default \"bms\"). Options include \"bms\", \"gigwa\", \"breedbase\", \"ebs\", \"germinate\". brapi_ver version BrAPI use, either \"v1\" \"v2\" (default \"v1\"). verbose Logical, indicating whether display progress information making API calls (default TRUE).","code":""},{"path":"/reference/set_qbms_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure BMS Server Settings — set_qbms_config","text":"return value.","code":""},{"path":"/reference/set_qbms_config.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Configure BMS Server Settings — set_qbms_config","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/set_qbms_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure BMS Server Settings — set_qbms_config","text":"","code":"set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")"},{"path":"/reference/set_qbms_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the QBMS Connection — set_qbms_connection","title":"Set the QBMS Connection — set_qbms_connection","text":"Sets QBMS connection object current environment, allowing users restore saved connection, including configuration settings session tokens.","code":""},{"path":"/reference/set_qbms_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the QBMS Connection — set_qbms_connection","text":"","code":"set_qbms_connection(env)"},{"path":"/reference/set_qbms_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the QBMS Connection — set_qbms_connection","text":"env list containing saved connection configuration state.","code":""},{"path":[]},{"path":"/reference/set_qbms_connection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the QBMS Connection — set_qbms_connection","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/set_qbms_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the QBMS Connection — set_qbms_connection","text":"","code":"if(interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")      login_bms()   set_crop(\"wheat\")   set_program(\"Wheat International Nurseries\")      df1  <- get_germplasm_data(\"Jabal\")   con1 <- get_qbms_connection()      set_qbms_config(\"https://gigwa.southgreen.fr/gigwa/\", engine = \"gigwa\", no_auth = TRUE)      gigwa_set_db(\"DIVRICE_NB\")   gigwa_set_project(\"refNB\")   gigwa_set_run(\"03052022\")      df2  <- gigwa_get_metadata()   con2 <- get_qbms_connection()      set_qbms_connection(con1)   df3 <- get_germplasm_attributes(\"Jabal\") }"},{"path":"/reference/set_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Current Active Study — set_study","title":"Set the Current Active Study — set_study","text":"Updates internal state set selected study current active study using associated studyDbId. allows operations performed within context selected study.","code":""},{"path":"/reference/set_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Current Active Study — set_study","text":"","code":"set_study(study_name)"},{"path":"/reference/set_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Current Active Study — set_study","text":"study_name string specifying name study set active.","code":""},{"path":"/reference/set_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Current Active Study — set_study","text":"return value. internal state updated selected study.","code":""},{"path":[]},{"path":"/reference/set_study.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Current Active Study — set_study","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/set_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Current Active Study — set_study","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()  # Log in to the server   set_crop(\"wheat\")  # Set crop   set_program(\"Wheat International Nurseries\")  # Set breeding program   set_trial(\"IDYT39\")  # Set trial   set_study(\"IDYT39 Environment Number 9\")  # Set study }"},{"path":"/reference/set_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Access Token Response — set_token","title":"Set Access Token Response — set_token","text":"Stores access token associated details (username expiration time) internal state. token typically retrieved server login used subsequent API requests.","code":""},{"path":"/reference/set_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Access Token Response — set_token","text":"","code":"set_token(token, user = \"\", expires_in = 3600)"},{"path":"/reference/set_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Access Token Response — set_token","text":"token access token string issued authorization server. user username associated token (optional). expires_in lifetime access token seconds (optional, default 3600 seconds).","code":""},{"path":"/reference/set_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Access Token Response — set_token","text":"return value. Updates internal state token info.","code":""},{"path":"/reference/set_token.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set Access Token Response — set_token","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/set_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Current Active Trial — set_trial","title":"Set the Current Active Trial — set_trial","text":"Updates internal state set selected trial current active trial using associated trialDbId. enables operations carried within context selected trial.","code":""},{"path":"/reference/set_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Current Active Trial — set_trial","text":"","code":"set_trial(trial_name)"},{"path":"/reference/set_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Current Active Trial — set_trial","text":"trial_name string specifying name trial set active.","code":""},{"path":"/reference/set_trial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Current Active Trial — set_trial","text":"return value. internal state updated selected trial.","code":""},{"path":[]},{"path":"/reference/set_trial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Current Active Trial — set_trial","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/reference/set_trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the Current Active Trial — set_trial","text":"","code":"if (interactive()) {   set_qbms_config(\"https://bms.icarda.org/ibpworkbench\")   login_bms()  # Log in to the server   set_crop(\"wheat\")  # Set crop   set_program(\"Wheat International Nurseries\")  # Set breeding program   set_trial(\"IDYT39\")  # Set trial }"},{"path":"/reference/set_variantset.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Active Variant Set — set_variantset","title":"Set the Active Variant Set — set_variantset","text":"Selects variant set name currently active study updates internal state make active variant set. selection required subsequent data retrieval operations related variant sets.","code":""},{"path":"/reference/set_variantset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Active Variant Set — set_variantset","text":"","code":"set_variantset(variantset_name)"},{"path":"/reference/set_variantset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Active Variant Set — set_variantset","text":"variantset_name name variant set active.","code":""},{"path":"/reference/set_variantset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Active Variant Set — set_variantset","text":"return value. Updates internal state selected variant set.","code":""},{"path":[]},{"path":"/reference/set_variantset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Active Variant Set — set_variantset","text":"Khaled Al-Shamaa (k.el-shamaa@cgiar.org)","code":""},{"path":"/news/index.html","id":"qbms-200-2025-08-02","dir":"Changelog","previous_headings":"","what":"QBMS 2.0.0 2025-08-02","title":"QBMS 2.0.0 2025-08-02","text":"Add Germinate support using BrAPI v2 calls. Add new generic genotyping functions including list_variantsets(), set_variantset(), get_variantset(), get_variants(), get_marker_map(). Add new get_trial_pedigree() function supports db compliance BrAPI v2. Add new generic login() function wraps around engine specific login_* functions. Fix BreedBase login bug caused incorrect httr2 form encoding sending credentials. Move special-case processing qbms.R (/API calls) new internal engine.R module script.","code":""},{"path":"/news/index.html","id":"qbms-150-2024-09-19","dir":"Changelog","previous_headings":"","what":"QBMS 1.5.0 2024-09-19","title":"QBMS 1.5.0 2024-09-19","text":"CRAN release: 2024-09-18 Updated core QBMS script replace non-CRAN async R package CRAN-standard future future.apply packages. Updated core QBMS script substitute deprecated httr R package recommended httr2 package. Add new gigwa_get_allelematrix() function boosting marker data retrieval speed 10 times. Add new gigwa_get_markers() function retrieve marker map describe physical positions markers chromosomes. Add new gigwa_get_sequences() function retrieve list sequences selected GIGWA project. Improve get_trial_obs_ontology() function performance systems supports BrAPI v2 /search/variables endpoint. Improve package documentation enhanced details. Implement internal central mechanism handle BrAPI POST /search endpoints, including 202 status code searchResultsDbId response.","code":""},{"path":"/news/index.html","id":"qbms-100-2024-03-07","dir":"Changelog","previous_headings":"","what":"QBMS 1.0.0 2024-03-07","title":"QBMS 1.0.0 2024-03-07","text":"CRAN release: 2024-03-07 Add EBS support using BrAPI v2 calls. Implement new generic internal mechanism supports BrAPI versions 1 2 calls core functions. Support OAuth 2.0 authentication (Authorization Code Grant flow) using new login_oauth2() function. Support external authorization option set access token value manually using new set_token() function. Support downloading TerraClimate netCDF data files extract data offline using new ini_terraclimate() function. Add new scan_brapi_endpoints() utility function scan available BrAPI endpoints configured data source server. Enhance gigwa_get_variants() function adding 3 extra filtering parameters: start position, end position, reference sequence name. Fix BreedBase login problem due form encoding issue adding new function login_breedbase() pass correct/expected encoding. Add HWSD v2.0 support query retrieve FAO harmonized soil data. Resolved several minor bugs reported EBS, BreedBase, DeltaBreed users improved stability.","code":""},{"path":"/news/index.html","id":"qbms-091-2023-03-28","dir":"Changelog","previous_headings":"","what":"QBMS 0.9.1 2023-03-28","title":"QBMS 0.9.1 2023-03-28","text":"CRAN release: 2023-03-28 Hot fix reported validation issue gigwa_set_db() function.","code":""},{"path":"/news/index.html","id":"qbms-090-2023-03-20","dir":"Changelog","previous_headings":"","what":"QBMS 0.9.0 2023-03-20","title":"QBMS 0.9.0 2023-03-20","text":"CRAN release: 2023-03-28 Implement caching techniques wherever applicable faster response times improve user experience. Thanks Johan Steven Aparicio initiating . Improve performance multi-page API calls optionally enabling asynchronous calls prevent blocking behavior fetching requested pages simultaneously. Add TerraClimate support query retrieve climate data (including 19 BIOCLIM variables). Add new get_germplasm_attributes() function retrieve germplasm attributes. Thanks Johan Steven Aparicio contribution. Add new gigwa_get_metadata() function retrieve metadata GIGWA database. Add new get_qbms_connection() set_qbms_connection() functions support connecting multiple providers. Thanks Francisco Agosto-Perez suggestions. get_pedigree_table() function can properly detect handle backcross cases. Fix error message calling get_pedigree_table() function case similar genotype names. Thanks Johan Steven Aparicio reporting .","code":""},{"path":"/news/index.html","id":"qbms-080-2022-05-18","dir":"Changelog","previous_headings":"","what":"QBMS 0.8.0 2022-05-18","title":"QBMS 0.8.0 2022-05-18","text":"CRAN release: 2022-05-19 Add GIGWA support (required version 2.4.1 higher) query retrieve SNPs data GWAS GS analysis pipelines. Tiny usability enhancements (e.g., automate path parameter setting, show server name login window, add progress bar get_program_studies function). Fix mistakenly redundant location names/info returned get_program_studies function.","code":""},{"path":"/news/index.html","id":"qbms-070-2022-03-03","dir":"Changelog","previous_headings":"","what":"QBMS 0.7.0 2022-03-03","title":"QBMS 0.7.0 2022-03-03","text":"CRAN release: 2022-03-02 Add BreedBase support using BrAPI v1 calls. Add functionality get pedigree table starting germplasm dataset. Improve set_qbms_config generalize way getting server domain URL. Default timeout become 120 sec instead 10. Set default encoding HTTP content UTF-8.","code":""},{"path":"/news/index.html","id":"qbms-060-2021-10-08","dir":"Changelog","previous_headings":"","what":"QBMS 0.6.0 2021-10-08","title":"QBMS 0.6.0 2021-10-08","text":"Fix filter year functionality list_trials function. Fix get_germplasm_data replaced deprecated germplasm-search call. Minimize package dependencies (rbindx replaced plyr::rbind.fill, rbindlistx replaced data.table::rbindlist, use merge replace dplyr::left_join). Resolve compatibility issues BrAPI changes BMS version 19. Enable set connection time_out set_qbms_config function. Get entry type (test check) get_germplasm_list returned data frame.","code":""},{"path":"/news/index.html","id":"qbms-050-2021-07-08","dir":"Changelog","previous_headings":"","what":"QBMS 0.5.0 2021-07-08","title":"QBMS 0.5.0 2021-07-08","text":"Fix issue empty list get_germplasm_data returned results. Fix retrieving error study data! Enhance returned info get_program_studies function include study settings number test/check entries.","code":""},{"path":"/news/index.html","id":"qbms-041-2020-10-16","dir":"Changelog","previous_headings":"","what":"QBMS 0.4.1 2020-10-16","title":"QBMS 0.4.1 2020-10-16","text":"Simplify configuration required URL BMS login page. Improve performance internal get_program_trials function passing programDbId /trials GET call. Add debug_qbms function get internal config/state object.","code":""},{"path":"/news/index.html","id":"qbms-040-2020-07-03","dir":"Changelog","previous_headings":"","what":"QBMS 0.4.0 2020-07-03","title":"QBMS 0.4.0 2020-07-03","text":"Convert R package. Add set_qbms_config function setup connection configuration variables. Use double colon approach functions external packages. Fix deprecated API call get_trial_obs_ontology function.","code":""},{"path":"/news/index.html","id":"qbms-031-2020-06-09","dir":"Changelog","previous_headings":"","what":"QBMS 0.3.1 2020-06-09","title":"QBMS 0.3.1 2020-06-09","text":"Fix “get_trial_data” function bug one study location. Function “list_studies” returns studyName also, function “set_study” input studyName now. Simplify “get_germplasm_list” function output getting rid nested lists. Deprecate “list_all_studies” function favor “get_program_studies” function.","code":""},{"path":"/news/index.html","id":"qbms-030-2020-06-02","dir":"Changelog","previous_headings":"","what":"QBMS 0.3.0 2020-06-02","title":"QBMS 0.3.0 2020-06-02","text":"Call BrAPI directly (.e. required “CIP-RIU/brapi” GitHub anymore). Add function get data current active trial (combined studies). Add function get list studies given germplasm used. Add function get specific germplasm data program trials. Handle BrAPI pagination proper way.","code":""},{"path":"/news/index.html","id":"qbms-020-2019-08-20","dir":"Changelog","previous_headings":"","what":"QBMS 0.2.0 2019-08-20","title":"QBMS 0.2.0 2019-08-20","text":"Adopt tidyverse style guide https://style.tidyverse.org/ Add functions documentation using roxygen2 format. Add basic error handling functions. Add function retrieve traits ontology trial.","code":""},{"path":"/news/index.html","id":"qbms-010-2019-07-24","dir":"Changelog","previous_headings":"","what":"QBMS 0.1.0 2019-07-24","title":"QBMS 0.1.0 2019-07-24","text":"Initial version.","code":""}]
